

Microchip Technology PIC18 LITE Macro Assembler V1.40 build -251452761 
                                                                                               Sun Dec 25 18:23:38 2016

Microchip Technology Omniscient Code Generator v1.40 (Free mode) build 201612010151
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    11                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    12                           	psect	text0,global,reloc=2,class=CODE,delta=1
    13                           	psect	text1,global,reloc=2,class=CODE,delta=1
    14                           	psect	text2,global,reloc=2,class=CODE,delta=1
    15                           	psect	text3,global,reloc=2,class=CODE,delta=1
    16                           	psect	text4,global,reloc=2,class=CODE,delta=1
    17                           	psect	text5,global,reloc=2,class=CODE,delta=1
    18                           	psect	text6,global,reloc=2,class=CODE,delta=1
    19                           	psect	text7,global,reloc=2,class=CODE,delta=1
    20                           	psect	text8,global,reloc=2,class=CODE,delta=1
    21                           	psect	text9,global,reloc=2,class=CODE,delta=1
    22                           	psect	text10,global,reloc=2,class=CODE,delta=1
    23                           	psect	text11,global,reloc=2,class=CODE,delta=1
    24                           	psect	text12,global,reloc=2,class=CODE,delta=1
    25                           	psect	text13,global,reloc=2,class=CODE,delta=1
    26                           	psect	text14,global,reloc=2,class=CODE,delta=1
    27                           	psect	text15,global,reloc=2,class=CODE,delta=1
    28                           	psect	text16,global,reloc=2,class=CODE,delta=1
    29                           	psect	text17,global,reloc=2,class=CODE,delta=1
    30                           	psect	text18,global,reloc=2,class=CODE,delta=1
    31                           	psect	text19,global,reloc=2,class=CODE,delta=1
    32                           	psect	text20,global,reloc=2,class=CODE,delta=1
    33                           	psect	text21,global,reloc=2,class=CODE,delta=1
    34                           	psect	text22,global,reloc=2,class=CODE,delta=1
    35                           	psect	text23,global,reloc=2,class=CODE,delta=1
    36                           	psect	text24,global,reloc=2,class=CODE,delta=1
    37                           	psect	text25,global,reloc=2,class=CODE,delta=1
    38                           	psect	text26,global,reloc=2,class=CODE,delta=1
    39                           	psect	text27,global,reloc=2,class=CODE,delta=1
    40                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    41                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    42                           	psect	text29,global,reloc=2,class=CODE,delta=1
    43                           	psect	text30,global,reloc=2,class=CODE,delta=1
    44                           	psect	text31,global,reloc=2,class=CODE,delta=1
    45                           	psect	text32,global,reloc=2,class=CODE,delta=1
    46                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    47                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    48                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    49  0000                     
    50                           ; Version 1.40
    51                           ; Generated 01/12/2016 GMT
    52                           ; 
    53                           ; Copyright Â© 2016, Microchip Technology Inc. and its subsidiaries ("Microchip")
    54                           ; All rights reserved.
    55                           ; 
    56                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    57                           ; 
    58                           ; Redistribution and use in source and binary forms, with or without modification, are
    59                           ; permitted provided that the following conditions are met:
    60                           ; 
    61                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    62                           ;        conditions and the following disclaimer.
    63                           ; 
    64                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    65                           ;        of conditions and the following disclaimer in the documentation and/or other
    66                           ;        materials provided with the distribution.
    67                           ; 
    68                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    69                           ;        software without specific prior written permission.
    70                           ; 
    71                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    72                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    73                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    74                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    75                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    76                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    77                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    78                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    79                           ; 
    80                           ; 
    81                           ; Code-generator required, PIC18F4550 Definitions
    82                           ; 
    83                           ; SFR Addresses
    84  0000                     
    85                           	psect	idataCOMRAM
    86  00753C                     __pidataCOMRAM:
    87                           	opt stack 0
    88                           
    89                           ;initializer for Leds13@i
    90  00753C  01                 	db	1
    91                           
    92                           ;initializer for Send4Disp@Nro_Disp
    93  00753D  01                 	db	1
    94                           
    95                           ;initializer for _OffsetPeriodo
    96  00753E  20                 	db	32
    97                           
    98                           ;initializer for _UpperByte
    99  00753F  FF                 	db	255
   100                           
   101                           ;initializer for _col
   102  007540  FF                 	db	255
   103                           
   104                           ;initializer for _fila
   105  007541  FF                 	db	255
   106                           
   107                           ;initializer for tic_debounce@debounce_tic
   108  007542  0A                 	db	10
   109                           
   110                           ;initializer for tic_encoder@estado
   111  007543  04                 	db	4
   112                           
   113                           ;initializer for _frecuencia
   114  007544  03E8               	dw	1000
   115                           
   116                           	psect	smallconst
   117  002018                     __psmallconst:
   118                           	opt stack 0
   119  002018  00                 	db	0
   120  002019                     _teclas:
   121                           	opt stack 0
   122  002019  01                 	db	1
   123  00201A  02                 	db	2
   124  00201B  03                 	db	3
   125  00201C  04                 	db	4
   126  00201D  05                 	db	5
   127  00201E  06                 	db	6
   128  00201F  07                 	db	7
   129  002020  08                 	db	8
   130  002021  09                 	db	9
   131  002022  2A                 	db	42
   132  002023  00                 	db	0
   133  002024  2B                 	db	43
   134  002025                     __end_of_teclas:
   135                           	opt stack 0
   136  0000                     _ADCON0bits	set	4034
   137  0000                     _ADCON1	set	4033
   138  0000                     _ADCON2	set	4032
   139  0000                     _ADRESH	set	4036
   140  0000                     _BAUDCONbits	set	4024
   141  0000                     _CCP1CONbits	set	4029
   142  0000                     _CCPR1L	set	4030
   143  0000                     _CMCON	set	4020
   144  0000                     _EEADR	set	4009
   145  0000                     _EECON1bits	set	4006
   146  0000                     _EECON2	set	4007
   147  0000                     _EEDATA	set	4008
   148  0000                     _INTCON2bits	set	4081
   149  0000                     _INTCON3bits	set	4080
   150  0000                     _INTCONbits	set	4082
   151  0000                     _LATA	set	3977
   152  0000                     _LATAbits	set	3977
   153  0000                     _LATB	set	3978
   154  0000                     _LATBbits	set	3978
   155  0000                     _LATC	set	3979
   156  0000                     _LATCbits	set	3979
   157  0000                     _LATD	set	3980
   158  0000                     _LATDbits	set	3980
   159  0000                     _LATE	set	3981
   160  0000                     _LATEbits	set	3981
   161  0000                     _PIE1bits	set	3997
   162  0000                     _PIR1bits	set	3998
   163  0000                     _PORTA	set	3968
   164  0000                     _PORTB	set	3969
   165  0000                     _PORTBbits	set	3969
   166  0000                     _PORTDbits	set	3971
   167  0000                     _PORTEbits	set	3972
   168  0000                     _PR2	set	4043
   169  0000                     _RCREG	set	4014
   170  0000                     _RCSTAbits	set	4011
   171  0000                     _SPBRG	set	4015
   172  0000                     _SPBRGH	set	4016
   173  0000                     _T0CONbits	set	4053
   174  0000                     _T1CONbits	set	4045
   175  0000                     _T2CONbits	set	4042
   176  0000                     _TMR0H	set	4055
   177  0000                     _TMR0L	set	4054
   178  0000                     _TMR1H	set	4047
   179  0000                     _TMR1L	set	4046
   180  0000                     _TRISA	set	3986
   181  0000                     _TRISAbits	set	3986
   182  0000                     _TRISB	set	3987
   183  0000                     _TRISBbits	set	3987
   184  0000                     _TRISC	set	3988
   185  0000                     _TRISCbits	set	3988
   186  0000                     _TRISD	set	3989
   187  0000                     _TRISE	set	3990
   188  0000                     _TRISEbits	set	3990
   189  0000                     _TXREG	set	4013
   190  0000                     _TXSTAbits	set	4012
   191  0000                     _INT0IE	set	32660
   192  0000                     _INT0IF	set	32657
   193  0000                     _INT1IE	set	32643
   194  0000                     _INT1IF	set	32640
   195  0000                     _RBIE	set	32659
   196  0000                     _RBIF	set	32656
   197  0000                     _RBIP	set	32648
   198  0000                     _RBPU	set	32655
   199  0000                     _TMR0IF	set	32658
   200  002025                     STR_8:
   201  002025  20                 	db	32
   202  002026  20                 	db	32
   203  002027  20                 	db	32
   204  002028  2A                 	db	42
   205  002029  2A                 	db	42
   206  00202A  46                 	db	70	;'F'
   207  00202B  72                 	db	114	;'r'
   208  00202C  61                 	db	97	;'a'
   209  00202D  73                 	db	115	;'s'
   210  00202E  65                 	db	101	;'e'
   211  00202F  20                 	db	32
   212  002030  65                 	db	101	;'e'
   213  002031  73                 	db	115	;'s'
   214  002032  63                 	db	99	;'c'
   215  002033  6F                 	db	111	;'o'
   216  002034  6E                 	db	110	;'n'
   217  002035  64                 	db	100	;'d'
   218  002036  69                 	db	105	;'i'
   219  002037  64                 	db	100	;'d'
   220  002038  61                 	db	97	;'a'
   221  002039  20                 	db	32
   222  00203A  3A                 	db	58	;':'
   223  00203B  2D                 	db	45
   224  00203C  29                 	db	41
   225  00203D  20                 	db	32
   226  00203E  2A                 	db	42
   227  00203F  2A                 	db	42
   228  002040  00                 	db	0
   229  002041                     STR_1:
   230  002041  48                 	db	72	;'H'
   231  002042  6F                 	db	111	;'o'
   232  002043  6C                 	db	108	;'l'
   233  002044  61                 	db	97	;'a'
   234  002045  20                 	db	32
   235  002046  41                 	db	65	;'A'
   236  002047  6C                 	db	108	;'l'
   237  002048  75                 	db	117	;'u'
   238  002049  6D                 	db	109	;'m'
   239  00204A  6E                 	db	110	;'n'
   240  00204B  6F                 	db	111	;'o'
   241  00204C  73                 	db	115	;'s'
   242  00204D  00                 	db	0
   243  00204E                     STR_3:
   244  00204E  42                 	db	66	;'B'
   245  00204F  4F                 	db	79	;'O'
   246  002050  54                 	db	84	;'T'
   247  002051  31                 	db	49	;'1'
   248  002052  20                 	db	32
   249  002053  00                 	db	0
   250  002054                     STR_2:
   251  002054  42                 	db	66	;'B'
   252  002055  4F                 	db	79	;'O'
   253  002056  54                 	db	84	;'T'
   254  002057  31                 	db	49	;'1'
   255  002058  00                 	db	0
   256  002059                     STR_5:
   257  002059  42                 	db	66	;'B'
   258  00205A  4F                 	db	79	;'O'
   259  00205B  54                 	db	84	;'T'
   260  00205C  32                 	db	50	;'2'
   261  00205D  00                 	db	0
   262  00205E                     STR_6:
   263  00205E  42                 	db	66	;'B'
   264  00205F  4F                 	db	79	;'O'
   265  002060  54                 	db	84	;'T'
   266  002061  33                 	db	51	;'3'
   267  002062  00                 	db	0
   268  002063                     STR_7:
   269  002063  42                 	db	66	;'B'
   270  002064  4F                 	db	79	;'O'
   271  002065  54                 	db	84	;'T'
   272  002066  34                 	db	52	;'4'
   273  002067  00                 	db	0
   274                           
   275                           ; #config settings
   276  002068  00                 	db	0	; dummy byte at the end
   277  0000                     
   278                           	psect	cinit
   279  00782E                     __pcinit:
   280                           	opt stack 0
   281  00782E                     start_initialization:
   282                           	opt stack 0
   283  00782E                     __initialization:
   284                           	opt stack 0
   285                           
   286                           ; Initialize objects allocated to COMRAM (10 bytes)
   287                           ; load TBLPTR registers with __pidataCOMRAM
   288  00782E  0E3C               	movlw	low __pidataCOMRAM
   289  007830  6EF6               	movwf	tblptrl,c
   290  007832  0E75               	movlw	high __pidataCOMRAM
   291  007834  6EF7               	movwf	tblptrh,c
   292  007836  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   293  007838  6EF8               	movwf	tblptru,c
   294  00783A  EE00  F045         	lfsr	0,__pdataCOMRAM
   295  00783E  EE10 F00A          	lfsr	1,10
   296  007842                     copy_data0:
   297  007842  0009               	tblrd		*+
   298  007844  CFF5 FFEE          	movff	tablat,postinc0
   299  007848  50E5               	movf	postdec1,w,c
   300  00784A  50E1               	movf	fsr1l,w,c
   301  00784C  E1FA               	bnz	copy_data0
   302                           
   303                           ; Clear objects allocated to COMRAM (36 bytes)
   304  00784E  EE00  F001         	lfsr	0,__pbssCOMRAM
   305  007852  0E24               	movlw	36
   306  007854                     clear_0:
   307  007854  6AEE               	clrf	postinc0,c
   308  007856  06E8               	decf	wreg,f,c
   309  007858  E1FD               	bnz	clear_0
   310  00785A                     end_of_initialization:
   311                           	opt stack 0
   312  00785A                     __end_of__initialization:
   313                           	opt stack 0
   314  00785A  904F               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   315  00785C  924F               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   316  00785E  0E00               	movlw	low (__Lmediumconst shr (0+16))
   317  007860  6EF8               	movwf	tblptru,c
   318  007862  0100               	movlb	0
   319  007864  EF99  F03A         	goto	_main	;jump to C main() function
   320                           tblptru	equ	0xFF8
   321                           tblptrh	equ	0xFF7
   322                           tblptrl	equ	0xFF6
   323                           tablat	equ	0xFF5
   324                           postinc0	equ	0xFEE
   325                           wreg	equ	0xFE8
   326                           postdec1	equ	0xFE5
   327                           fsr1l	equ	0xFE1
   328                           
   329                           	psect	bssCOMRAM
   330  000001                     __pbssCOMRAM:
   331                           	opt stack 0
   332  000001                     _LCD_tout:
   333                           	opt stack 0
   334  000001                     	ds	2
   335  000003                     _MedioPeriodoSet:
   336                           	opt stack 0
   337  000003                     	ds	2
   338  000005                     _desplazar_tout:
   339                           	opt stack 0
   340  000005                     	ds	2
   341  000007                     _led_tout:
   342                           	opt stack 0
   343  000007                     	ds	2
   344  000009                     Botones13@Estado_BOT:
   345                           	opt stack 0
   346  000009                     	ds	1
   347  00000A                     _EstadoDeLosBotones:
   348                           	opt stack 0
   349  00000A                     	ds	1
   350  00000B                     _LowerByte:
   351                           	opt stack 0
   352  00000B                     	ds	1
   353  00000C                     _Multiplicador:
   354                           	opt stack 0
   355  00000C                     	ds	1
   356  00000D                     _MultiplicadorSet:
   357                           	opt stack 0
   358  00000D                     	ds	1
   359  00000E                     _bot_tout:
   360                           	opt stack 0
   361  00000E                     	ds	1
   362  00000F                     _delay_kb:
   363                           	opt stack 0
   364  00000F                     	ds	1
   365  000010                     _encoderTout:
   366                           	opt stack 0
   367  000010                     	ds	1
   368  000011                     _flagCanal:
   369                           	opt stack 0
   370  000011                     	ds	1
   371  000012                     _flag_kb:
   372                           	opt stack 0
   373  000012                     	ds	1
   374  000013                     _maximoEncoder:
   375                           	opt stack 0
   376  000013                     	ds	1
   377  000014                     _minimoEncoder:
   378                           	opt stack 0
   379  000014                     	ds	1
   380  000015                     _mux_tout:
   381                           	opt stack 0
   382  000015                     	ds	1
   383  000016                     _posicionEncoder:
   384                           	opt stack 0
   385  000016                     	ds	1
   386  000017                     debounce@cnt0:
   387                           	opt stack 0
   388  000017                     	ds	1
   389  000018                     debounce@cnt1:
   390                           	opt stack 0
   391  000018                     	ds	1
   392  000019                     debounce@state:
   393                           	opt stack 0
   394  000019                     	ds	1
   395  00001A                     demo_shield2_1@Desplazar:
   396                           	opt stack 0
   397  00001A                     	ds	1
   398  00001B                     demo_shield2_1@PrimeraVez:
   399                           	opt stack 0
   400  00001B                     	ds	1
   401  00001C                     demo_shield2_1@cont:
   402                           	opt stack 0
   403  00001C                     	ds	1
   404  00001D                     demo_shield2_1@cont1:
   405                           	opt stack 0
   406  00001D                     	ds	1
   407  00001E                     demo_shield2_1@cont2:
   408                           	opt stack 0
   409  00001E                     	ds	1
   410  00001F                     demo_shield2_1@cont3:
   411                           	opt stack 0
   412  00001F                     	ds	1
   413  000020                     demo_shield2_1@flag0:
   414                           	opt stack 0
   415  000020                     	ds	1
   416  000021                     demo_shield2_1@flag1:
   417                           	opt stack 0
   418  000021                     	ds	1
   419  000022                     demo_shield2_1@flag2:
   420                           	opt stack 0
   421  000022                     	ds	1
   422  000023                     demo_shield2_1@flag3:
   423                           	opt stack 0
   424  000023                     	ds	1
   425  000024                     tecla@status_KB:
   426                           	opt stack 0
   427  000024                     	ds	1
   428                           tblptru	equ	0xFF8
   429                           tblptrh	equ	0xFF7
   430                           tblptrl	equ	0xFF6
   431                           tablat	equ	0xFF5
   432                           postinc0	equ	0xFEE
   433                           wreg	equ	0xFE8
   434                           postdec1	equ	0xFE5
   435                           fsr1l	equ	0xFE1
   436                           
   437                           	psect	dataCOMRAM
   438  000045                     __pdataCOMRAM:
   439                           	opt stack 0
   440  000045                     Leds13@i:
   441                           	opt stack 0
   442  000045                     	ds	1
   443  000046                     Send4Disp@Nro_Disp:
   444                           	opt stack 0
   445  000046                     	ds	1
   446  000047                     _OffsetPeriodo:
   447                           	opt stack 0
   448  000047                     	ds	1
   449  000048                     _UpperByte:
   450                           	opt stack 0
   451  000048                     	ds	1
   452  000049                     _col:
   453                           	opt stack 0
   454  000049                     	ds	1
   455  00004A                     _fila:
   456                           	opt stack 0
   457  00004A                     	ds	1
   458  00004B                     tic_debounce@debounce_tic:
   459                           	opt stack 0
   460  00004B                     	ds	1
   461  00004C                     tic_encoder@estado:
   462                           	opt stack 0
   463  00004C                     	ds	1
   464  00004D                     _frecuencia:
   465                           	opt stack 0
   466  00004D                     	ds	2
   467                           tblptru	equ	0xFF8
   468                           tblptrh	equ	0xFF7
   469                           tblptrl	equ	0xFF6
   470                           tablat	equ	0xFF5
   471                           postinc0	equ	0xFEE
   472                           wreg	equ	0xFE8
   473                           postdec1	equ	0xFE5
   474                           fsr1l	equ	0xFE1
   475                           
   476                           	psect	cstackBANK0
   477  000060                     __pcstackBANK0:
   478                           	opt stack 0
   479  000060                     ?___wmul:
   480                           	opt stack 0
   481  000060                     ___wmul@multiplier:
   482                           	opt stack 0
   483                           
   484                           ; 2 bytes @ 0x0
   485  000060                     	ds	2
   486  000062                     ___wmul@multiplicand:
   487                           	opt stack 0
   488                           
   489                           ; 2 bytes @ 0x2
   490  000062                     	ds	2
   491  000064                     ??_CalculoDeFrecuencia:
   492                           
   493                           ; 1 bytes @ 0x4
   494  000064                     	ds	2
   495  000066                     AumentarPeriodo@valor:
   496                           	opt stack 0
   497  000066                     DisminuirPeriodo@valor:
   498                           	opt stack 0
   499                           
   500                           ; 1 bytes @ 0x6
   501  000066                     	ds	1
   502                           tblptru	equ	0xFF8
   503                           tblptrh	equ	0xFF7
   504                           tblptrl	equ	0xFF6
   505                           tablat	equ	0xFF5
   506                           postinc0	equ	0xFEE
   507                           wreg	equ	0xFE8
   508                           postdec1	equ	0xFE5
   509                           fsr1l	equ	0xFE1
   510                           
   511                           	psect	cstackCOMRAM
   512  000025                     __pcstackCOMRAM:
   513                           	opt stack 0
   514  000025                     debounce@sample:
   515                           	opt stack 0
   516                           
   517                           ; 1 bytes @ 0x0
   518  000025                     	ds	1
   519  000026                     debounce@delta:
   520                           	opt stack 0
   521                           
   522                           ; 1 bytes @ 0x1
   523  000026                     	ds	1
   524  000027                     ??_myISR:
   525  000027                     
   526                           ; 1 bytes @ 0x2
   527  000027                     	ds	14
   528  000035                     ?___awmod:
   529                           	opt stack 0
   530  000035                     ?___aldiv:
   531                           	opt stack 0
   532  000035                     write_LCD@dato:
   533                           	opt stack 0
   534  000035                     read_BUSY@aux:
   535                           	opt stack 0
   536  000035                     transmitir@Dato:
   537                           	opt stack 0
   538  000035                     obtener_ADC8@GuardoPorta:
   539                           	opt stack 0
   540  000035                     ___awmod@dividend:
   541                           	opt stack 0
   542  000035                     ___aldiv@dividend:
   543                           	opt stack 0
   544                           
   545                           ; 4 bytes @ 0x10
   546  000035                     	ds	1
   547  000036                     write_DATA@dato:
   548                           	opt stack 0
   549  000036                     write_CMD@dato:
   550                           	opt stack 0
   551  000036                     obtener_ADC8@GuardoTrisa:
   552                           	opt stack 0
   553  000036                     informar@dato:
   554                           	opt stack 0
   555                           
   556                           ; 2 bytes @ 0x11
   557  000036                     	ds	1
   558  000037                     char2LCD@dato:
   559                           	opt stack 0
   560  000037                     set_CURSOR@posi:
   561                           	opt stack 0
   562  000037                     msg2LCD@datos:
   563                           	opt stack 0
   564  000037                     ___awmod@divisor:
   565                           	opt stack 0
   566                           
   567                           ; 2 bytes @ 0x12
   568  000037                     	ds	1
   569  000038                     informar@longitud:
   570                           	opt stack 0
   571                           
   572                           ; 1 bytes @ 0x13
   573  000038                     	ds	1
   574  000039                     ??_informar:
   575  000039                     ___awmod@counter:
   576                           	opt stack 0
   577  000039                     ___aldiv@divisor:
   578                           	opt stack 0
   579                           
   580                           ; 4 bytes @ 0x14
   581  000039                     	ds	1
   582  00003A                     ___awmod@sign:
   583                           	opt stack 0
   584                           
   585                           ; 1 bytes @ 0x15
   586  00003A                     	ds	1
   587  00003B                     ?___awdiv:
   588                           	opt stack 0
   589  00003B                     informar@i:
   590                           	opt stack 0
   591  00003B                     ___awdiv@dividend:
   592                           	opt stack 0
   593                           
   594                           ; 2 bytes @ 0x16
   595  00003B                     	ds	2
   596  00003D                     ___aldiv@counter:
   597                           	opt stack 0
   598  00003D                     ___awdiv@divisor:
   599                           	opt stack 0
   600                           
   601                           ; 2 bytes @ 0x18
   602  00003D                     	ds	1
   603  00003E                     ___aldiv@sign:
   604                           	opt stack 0
   605                           
   606                           ; 1 bytes @ 0x19
   607  00003E                     	ds	1
   608  00003F                     ___awdiv@counter:
   609                           	opt stack 0
   610  00003F                     ___aldiv@quotient:
   611                           	opt stack 0
   612                           
   613                           ; 4 bytes @ 0x1A
   614  00003F                     	ds	1
   615  000040                     ___awdiv@sign:
   616                           	opt stack 0
   617                           
   618                           ; 1 bytes @ 0x1B
   619  000040                     	ds	1
   620  000041                     ___awdiv@quotient:
   621                           	opt stack 0
   622                           
   623                           ; 2 bytes @ 0x1C
   624  000041                     	ds	2
   625  000043                     ___wmul@product:
   626                           	opt stack 0
   627                           
   628                           ; 2 bytes @ 0x1E
   629  000043                     	ds	2
   630  000045                     tblptru	equ	0xFF8
   631                           tblptrh	equ	0xFF7
   632                           tblptrl	equ	0xFF6
   633                           tablat	equ	0xFF5
   634                           postinc0	equ	0xFEE
   635                           wreg	equ	0xFE8
   636                           postdec1	equ	0xFE5
   637                           fsr1l	equ	0xFE1
   638                           
   639                           ; 1 bytes @ 0x20
   640 ;;
   641 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   642 ;;
   643 ;; *************** function _main *****************
   644 ;; Defined at:
   645 ;;		line 23 in file "main.c"
   646 ;; Parameters:    Size  Location     Type
   647 ;;		None
   648 ;; Auto vars:     Size  Location     Type
   649 ;;		None
   650 ;; Return value:  Size  Location     Type
   651 ;;                  1    wreg      void 
   652 ;; Registers used:
   653 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   654 ;; Tracked objects:
   655 ;;		On entry : 0/0
   656 ;;		On exit  : 0/0
   657 ;;		Unchanged: 0/0
   658 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   659 ;;      Params:         0       0       0       0       0       0       0       0       0
   660 ;;      Locals:         0       0       0       0       0       0       0       0       0
   661 ;;      Temps:          0       0       0       0       0       0       0       0       0
   662 ;;      Totals:         0       0       0       0       0       0       0       0       0
   663 ;;Total ram usage:        0 bytes
   664 ;; Hardware stack levels required when called:    8
   665 ;; This function calls:
   666 ;;		_demo_shield2_1
   667 ;;		_demo_shield2_1_INI
   668 ;; This function is called by:
   669 ;;		Startup code after reset
   670 ;; This function uses a non-reentrant model
   671 ;;
   672                           
   673                           	psect	text0
   674  007532                     __ptext0:
   675                           	opt stack 0
   676  007532                     _main:
   677                           	opt stack 23
   678                           
   679                           ;main.c: 25: demo_shield2_1_INI();
   680                           
   681                           ;incstack = 0
   682  007532  ECE0  F03B         	call	_demo_shield2_1_INI	;wreg free
   683  007536                     l19:
   684                           
   685                           ;main.c: 28: demo_shield2_1();
   686  007536  EC9E  F03D         	call	_demo_shield2_1	;wreg free
   687  00753A  D7FD               	goto	l19
   688  00753C                     __end_of_main:
   689                           	opt stack 0
   690                           tblptru	equ	0xFF8
   691                           tblptrh	equ	0xFF7
   692                           tblptrl	equ	0xFF6
   693                           tablat	equ	0xFF5
   694                           postinc0	equ	0xFEE
   695                           wreg	equ	0xFE8
   696                           postdec1	equ	0xFE5
   697                           fsr1l	equ	0xFE1
   698                           
   699 ;; *************** function _demo_shield2_1_INI *****************
   700 ;; Defined at:
   701 ;;		line 247 in file "Tecnica1.c"
   702 ;; Parameters:    Size  Location     Type
   703 ;;		None
   704 ;; Auto vars:     Size  Location     Type
   705 ;;		None
   706 ;; Return value:  Size  Location     Type
   707 ;;                  1    wreg      void 
   708 ;; Registers used:
   709 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   710 ;; Tracked objects:
   711 ;;		On entry : 0/0
   712 ;;		On exit  : 0/0
   713 ;;		Unchanged: 0/0
   714 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   715 ;;      Params:         0       0       0       0       0       0       0       0       0
   716 ;;      Locals:         0       0       0       0       0       0       0       0       0
   717 ;;      Temps:          0       0       0       0       0       0       0       0       0
   718 ;;      Totals:         0       0       0       0       0       0       0       0       0
   719 ;;Total ram usage:        0 bytes
   720 ;; Hardware stack levels used:    1
   721 ;; Hardware stack levels required when called:    7
   722 ;; This function calls:
   723 ;;		_CalculoDeFrecuencia
   724 ;;		_LCD_init
   725 ;;		_PicIni21
   726 ;;		_TIMER0_INI
   727 ;;		_TIMER1_INI
   728 ;;		_USART_INI
   729 ;;		_clear_LCD
   730 ;;		_msg2LCD
   731 ;; This function is called by:
   732 ;;		_main
   733 ;; This function uses a non-reentrant model
   734 ;;
   735                           
   736                           	psect	text1
   737  0077C0                     __ptext1:
   738                           	opt stack 0
   739  0077C0                     _demo_shield2_1_INI:
   740                           	opt stack 23
   741                           
   742                           ;Tecnica1.c: 248: CalculoDeFrecuencia();
   743                           
   744                           ;incstack = 0
   745  0077C0  ECCD  F03E         	call	_CalculoDeFrecuencia	;wreg free
   746                           
   747                           ;Tecnica1.c: 249: PicIni21();
   748  0077C4  EC9A  F03B         	call	_PicIni21	;wreg free
   749                           
   750                           ;Tecnica1.c: 250: TIMER0_INI();
   751  0077C8  ECEE  F03A         	call	_TIMER0_INI	;wreg free
   752                           
   753                           ;Tecnica1.c: 251: TIMER1_INI();
   754  0077CC  EC38  F03B         	call	_TIMER1_INI	;wreg free
   755                           
   756                           ;Tecnica1.c: 252: (INTCONbits.GIE = 1);
   757  0077D0  8EF2               	bsf	intcon,7,c	;volatile
   758                           
   759                           ;Tecnica1.c: 253: T0CONbits.TMR0ON = 1;
   760  0077D2  8ED5               	bsf	4053,7,c	;volatile
   761                           
   762                           ;Tecnica1.c: 254: T1CONbits.TMR1ON = 1;
   763  0077D4  80CD               	bsf	4045,0,c	;volatile
   764                           
   765                           ;Tecnica1.c: 255: LCD_init();
   766  0077D6  ECF1  F03C         	call	_LCD_init	;wreg free
   767                           
   768                           ;Tecnica1.c: 256: clear_LCD();
   769  0077DA  ECA9  F03A         	call	_clear_LCD	;wreg free
   770                           
   771                           ;Tecnica1.c: 257: USART_INI();
   772  0077DE  EC6F  F03B         	call	_USART_INI	;wreg free
   773                           
   774                           ;Tecnica1.c: 258: msg2LCD("Hola Alumnos");
   775  0077E2  0E41               	movlw	low STR_1
   776  0077E4  6E37               	movwf	msg2LCD@datos,c
   777  0077E6  0E20               	movlw	high STR_1
   778  0077E8  6E38               	movwf	msg2LCD@datos+1,c
   779  0077EA  ECB0  F03B         	call	_msg2LCD	;wreg free
   780                           
   781                           ;Tecnica1.c: 260: TRISAbits.TRISA2 = 0;;
   782  0077EE  9492               	bcf	3986,2,c	;volatile
   783                           
   784                           ;Tecnica1.c: 261: TRISAbits.TRISA3 = 0;;
   785  0077F0  9692               	bcf	3986,3,c	;volatile
   786  0077F2  0012               	return		;funcret
   787  0077F4                     __end_of_demo_shield2_1_INI:
   788                           	opt stack 0
   789                           tblptru	equ	0xFF8
   790                           tblptrh	equ	0xFF7
   791                           tblptrl	equ	0xFF6
   792                           tablat	equ	0xFF5
   793                           intcon	equ	0xFF2
   794                           postinc0	equ	0xFEE
   795                           wreg	equ	0xFE8
   796                           postdec1	equ	0xFE5
   797                           fsr1l	equ	0xFE1
   798                           
   799 ;; *************** function _USART_INI *****************
   800 ;; Defined at:
   801 ;;		line 42 in file "Tecnica1.c"
   802 ;; Parameters:    Size  Location     Type
   803 ;;		None
   804 ;; Auto vars:     Size  Location     Type
   805 ;;		None
   806 ;; Return value:  Size  Location     Type
   807 ;;                  1    wreg      void 
   808 ;; Registers used:
   809 ;;		wreg, status,2
   810 ;; Tracked objects:
   811 ;;		On entry : 0/0
   812 ;;		On exit  : 0/0
   813 ;;		Unchanged: 0/0
   814 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   815 ;;      Params:         0       0       0       0       0       0       0       0       0
   816 ;;      Locals:         0       0       0       0       0       0       0       0       0
   817 ;;      Temps:          0       0       0       0       0       0       0       0       0
   818 ;;      Totals:         0       0       0       0       0       0       0       0       0
   819 ;;Total ram usage:        0 bytes
   820 ;; Hardware stack levels used:    1
   821 ;; Hardware stack levels required when called:    4
   822 ;; This function calls:
   823 ;;		Nothing
   824 ;; This function is called by:
   825 ;;		_demo_shield2_1_INI
   826 ;; This function uses a non-reentrant model
   827 ;;
   828                           
   829                           	psect	text2
   830  0076DE                     __ptext2:
   831                           	opt stack 0
   832  0076DE                     _USART_INI:
   833                           	opt stack 25
   834                           
   835                           ;Tecnica1.c: 44: TXSTAbits.BRGH = 1;
   836                           
   837                           ;incstack = 0
   838  0076DE  84AC               	bsf	4012,2,c	;volatile
   839                           
   840                           ;Tecnica1.c: 45: BAUDCONbits.BRG16=1;
   841  0076E0  86B8               	bsf	4024,3,c	;volatile
   842                           
   843                           ;Tecnica1.c: 46: TXSTAbits.SYNC = 0;
   844  0076E2  98AC               	bcf	4012,4,c	;volatile
   845                           
   846                           ;Tecnica1.c: 47: SPBRG = 0xE1;
   847  0076E4  0EE1               	movlw	225
   848  0076E6  6EAF               	movwf	4015,c	;volatile
   849                           
   850                           ;Tecnica1.c: 48: SPBRGH = 0x04;
   851  0076E8  0E04               	movlw	4
   852  0076EA  6EB0               	movwf	4016,c	;volatile
   853                           
   854                           ;Tecnica1.c: 49: RCSTAbits.SPEN = 1;
   855  0076EC  8EAB               	bsf	4011,7,c	;volatile
   856                           
   857                           ;Tecnica1.c: 52: TXSTAbits.TX9 = 0;
   858  0076EE  9CAC               	bcf	4012,6,c	;volatile
   859                           
   860                           ;Tecnica1.c: 53: TXSTAbits.TXEN = 0;
   861  0076F0  9AAC               	bcf	4012,5,c	;volatile
   862                           
   863                           ;Tecnica1.c: 56: (void) RCREG;
   864  0076F2  50AE               	movf	4014,w,c	;volatile
   865                           
   866                           ;Tecnica1.c: 57: (void) RCREG;
   867  0076F4  50AE               	movf	4014,w,c	;volatile
   868                           
   869                           ;Tecnica1.c: 58: (void) RCREG;
   870  0076F6  50AE               	movf	4014,w,c	;volatile
   871                           
   872                           ;Tecnica1.c: 59: RCSTAbits.RX9 = 0 ;
   873  0076F8  9CAB               	bcf	4011,6,c	;volatile
   874                           
   875                           ;Tecnica1.c: 60: PIE1bits.RCIE = 1;
   876  0076FA  8A9D               	bsf	3997,5,c	;volatile
   877                           
   878                           ;Tecnica1.c: 61: RCSTAbits.CREN = 1;
   879  0076FC  88AB               	bsf	4011,4,c	;volatile
   880                           
   881                           ;Tecnica1.c: 62: INTCONbits.PEIE = 1;
   882  0076FE  8CF2               	bsf	intcon,6,c	;volatile
   883                           
   884                           ;Tecnica1.c: 64: TRISCbits.RC6 = 1;
   885  007700  8C94               	bsf	3988,6,c	;volatile
   886                           
   887                           ;Tecnica1.c: 65: TRISCbits.RC7 = 1;
   888  007702  8E94               	bsf	3988,7,c	;volatile
   889                           
   890                           ;Tecnica1.c: 66: BAUDCONbits.RXDTP = 1;
   891  007704  8AB8               	bsf	4024,5,c	;volatile
   892  007706  0012               	return		;funcret
   893  007708                     __end_of_USART_INI:
   894                           	opt stack 0
   895                           tblptru	equ	0xFF8
   896                           tblptrh	equ	0xFF7
   897                           tblptrl	equ	0xFF6
   898                           tablat	equ	0xFF5
   899                           intcon	equ	0xFF2
   900                           postinc0	equ	0xFEE
   901                           wreg	equ	0xFE8
   902                           postdec1	equ	0xFE5
   903                           fsr1l	equ	0xFE1
   904                           
   905 ;; *************** function _TIMER1_INI *****************
   906 ;; Defined at:
   907 ;;		line 26 in file "Tecnica1.c"
   908 ;; Parameters:    Size  Location     Type
   909 ;;		None
   910 ;; Auto vars:     Size  Location     Type
   911 ;;		None
   912 ;; Return value:  Size  Location     Type
   913 ;;                  1    wreg      void 
   914 ;; Registers used:
   915 ;;		wreg, status,2
   916 ;; Tracked objects:
   917 ;;		On entry : 0/0
   918 ;;		On exit  : 0/0
   919 ;;		Unchanged: 0/0
   920 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   921 ;;      Params:         0       0       0       0       0       0       0       0       0
   922 ;;      Locals:         0       0       0       0       0       0       0       0       0
   923 ;;      Temps:          0       0       0       0       0       0       0       0       0
   924 ;;      Totals:         0       0       0       0       0       0       0       0       0
   925 ;;Total ram usage:        0 bytes
   926 ;; Hardware stack levels used:    1
   927 ;; Hardware stack levels required when called:    4
   928 ;; This function calls:
   929 ;;		Nothing
   930 ;; This function is called by:
   931 ;;		_demo_shield2_1_INI
   932 ;; This function uses a non-reentrant model
   933 ;;
   934                           
   935                           	psect	text3
   936  007670                     __ptext3:
   937                           	opt stack 0
   938  007670                     _TIMER1_INI:
   939                           	opt stack 25
   940                           
   941                           ;Tecnica1.c: 27: T1CONbits.TMR1ON = 0;
   942                           
   943                           ;incstack = 0
   944  007670  90CD               	bcf	4045,0,c	;volatile
   945                           
   946                           ;Tecnica1.c: 28: T1CONbits.TMR1CS = 0;
   947  007672  92CD               	bcf	4045,1,c	;volatile
   948                           
   949                           ;Tecnica1.c: 29: T1CONbits.nT1SYNC = 1;
   950  007674  84CD               	bsf	4045,2,c	;volatile
   951                           
   952                           ;Tecnica1.c: 30: T1CONbits.T1OSCEN = 0;
   953  007676  96CD               	bcf	4045,3,c	;volatile
   954                           
   955                           ;Tecnica1.c: 31: T1CONbits.T1CKPS = 0;
   956  007678  0ECF               	movlw	-49
   957  00767A  16CD               	andwf	4045,f,c	;volatile
   958                           
   959                           ;Tecnica1.c: 32: T1CONbits.RD16 = 0;
   960  00767C  9ECD               	bcf	4045,7,c	;volatile
   961                           
   962                           ;Tecnica1.c: 33: T1CONbits.T1RUN = 0;
   963  00767E  9CCD               	bcf	4045,6,c	;volatile
   964                           
   965                           ;Tecnica1.c: 34: TMR1L = 0x4F;
   966  007680  0E4F               	movlw	79
   967  007682  6ECE               	movwf	4046,c	;volatile
   968                           
   969                           ;Tecnica1.c: 35: TMR1H = 0xFB;
   970  007684  0EFB               	movlw	251
   971  007686  6ECF               	movwf	4047,c	;volatile
   972                           
   973                           ;Tecnica1.c: 36: PIR1bits.TMR1IF = 0;
   974  007688  909E               	bcf	3998,0,c	;volatile
   975                           
   976                           ;Tecnica1.c: 37: PIE1bits.TMR1IE = 1;
   977  00768A  809D               	bsf	3997,0,c	;volatile
   978                           
   979                           ;Tecnica1.c: 38: INTCONbits.PEIE = 1;
   980  00768C  8CF2               	bsf	intcon,6,c	;volatile
   981  00768E  0012               	return		;funcret
   982  007690                     __end_of_TIMER1_INI:
   983                           	opt stack 0
   984                           tblptru	equ	0xFF8
   985                           tblptrh	equ	0xFF7
   986                           tblptrl	equ	0xFF6
   987                           tablat	equ	0xFF5
   988                           intcon	equ	0xFF2
   989                           postinc0	equ	0xFEE
   990                           wreg	equ	0xFE8
   991                           postdec1	equ	0xFE5
   992                           fsr1l	equ	0xFE1
   993                           
   994 ;; *************** function _TIMER0_INI *****************
   995 ;; Defined at:
   996 ;;		line 14 in file "Tecnica1.c"
   997 ;; Parameters:    Size  Location     Type
   998 ;;		None
   999 ;; Auto vars:     Size  Location     Type
  1000 ;;		None
  1001 ;; Return value:  Size  Location     Type
  1002 ;;                  1    wreg      void 
  1003 ;; Registers used:
  1004 ;;		wreg, status,2
  1005 ;; Tracked objects:
  1006 ;;		On entry : 0/0
  1007 ;;		On exit  : 0/0
  1008 ;;		Unchanged: 0/0
  1009 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1010 ;;      Params:         0       0       0       0       0       0       0       0       0
  1011 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1012 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1013 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1014 ;;Total ram usage:        0 bytes
  1015 ;; Hardware stack levels used:    1
  1016 ;; Hardware stack levels required when called:    4
  1017 ;; This function calls:
  1018 ;;		Nothing
  1019 ;; This function is called by:
  1020 ;;		_demo_shield2_1_INI
  1021 ;; This function uses a non-reentrant model
  1022 ;;
  1023                           
  1024                           	psect	text4
  1025  0075DC                     __ptext4:
  1026                           	opt stack 0
  1027  0075DC                     _TIMER0_INI:
  1028                           	opt stack 25
  1029                           
  1030                           ;Tecnica1.c: 15: T0CONbits.TMR0ON = 0;
  1031                           
  1032                           ;incstack = 0
  1033  0075DC  9ED5               	bcf	4053,7,c	;volatile
  1034                           
  1035                           ;Tecnica1.c: 16: T0CONbits.T08BIT = 1;
  1036  0075DE  8CD5               	bsf	4053,6,c	;volatile
  1037                           
  1038                           ;Tecnica1.c: 17: T0CONbits.T0CS = 0;
  1039  0075E0  9AD5               	bcf	4053,5,c	;volatile
  1040                           
  1041                           ;Tecnica1.c: 18: T0CONbits.PSA = 0;
  1042  0075E2  96D5               	bcf	4053,3,c	;volatile
  1043                           
  1044                           ;Tecnica1.c: 19: T0CONbits.T0PS0 = 1;
  1045  0075E4  80D5               	bsf	4053,0,c	;volatile
  1046                           
  1047                           ;Tecnica1.c: 20: T0CONbits.T0PS1 = 1;
  1048  0075E6  82D5               	bsf	4053,1,c	;volatile
  1049                           
  1050                           ;Tecnica1.c: 21: T0CONbits.T0PS2 = 1;
  1051  0075E8  84D5               	bsf	4053,2,c	;volatile
  1052                           
  1053                           ;Tecnica1.c: 22: TMR0L = 209;
  1054  0075EA  0ED1               	movlw	209
  1055  0075EC  6ED6               	movwf	4054,c	;volatile
  1056                           
  1057                           ;Tecnica1.c: 23: TMR0H = 0xFF;
  1058  0075EE  68D7               	setf	4055,c	;volatile
  1059                           
  1060                           ;Tecnica1.c: 24: INTCONbits.TMR0IE = 1;
  1061  0075F0  8AF2               	bsf	intcon,5,c	;volatile
  1062  0075F2  0012               	return		;funcret
  1063  0075F4                     __end_of_TIMER0_INI:
  1064                           	opt stack 0
  1065                           tblptru	equ	0xFF8
  1066                           tblptrh	equ	0xFF7
  1067                           tblptrl	equ	0xFF6
  1068                           tablat	equ	0xFF5
  1069                           intcon	equ	0xFF2
  1070                           postinc0	equ	0xFEE
  1071                           wreg	equ	0xFE8
  1072                           postdec1	equ	0xFE5
  1073                           fsr1l	equ	0xFE1
  1074                           
  1075 ;; *************** function _PicIni21 *****************
  1076 ;; Defined at:
  1077 ;;		line 3 in file "ConfShield2_1.c"
  1078 ;; Parameters:    Size  Location     Type
  1079 ;;		None
  1080 ;; Auto vars:     Size  Location     Type
  1081 ;;		None
  1082 ;; Return value:  Size  Location     Type
  1083 ;;                  1    wreg      void 
  1084 ;; Registers used:
  1085 ;;		wreg, status,2
  1086 ;; Tracked objects:
  1087 ;;		On entry : 0/0
  1088 ;;		On exit  : 0/0
  1089 ;;		Unchanged: 0/0
  1090 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1091 ;;      Params:         0       0       0       0       0       0       0       0       0
  1092 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1093 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1094 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1095 ;;Total ram usage:        0 bytes
  1096 ;; Hardware stack levels used:    1
  1097 ;; Hardware stack levels required when called:    4
  1098 ;; This function calls:
  1099 ;;		Nothing
  1100 ;; This function is called by:
  1101 ;;		_demo_shield2_1_INI
  1102 ;; This function uses a non-reentrant model
  1103 ;;
  1104                           
  1105                           	psect	text5
  1106  007734                     __ptext5:
  1107                           	opt stack 0
  1108  007734                     _PicIni21:
  1109                           	opt stack 25
  1110                           
  1111                           ;ConfShield2_1.c: 7: LATA = 0x00;
  1112                           
  1113                           ;incstack = 0
  1114  007734  0E00               	movlw	0
  1115  007736  6E89               	movwf	3977,c	;volatile
  1116                           
  1117                           ;ConfShield2_1.c: 8: LATB = 0x00;
  1118  007738  0E00               	movlw	0
  1119  00773A  6E8A               	movwf	3978,c	;volatile
  1120                           
  1121                           ;ConfShield2_1.c: 9: LATC = 0x00;
  1122  00773C  0E00               	movlw	0
  1123  00773E  6E8B               	movwf	3979,c	;volatile
  1124                           
  1125                           ;ConfShield2_1.c: 10: LATD = 0x00;
  1126  007740  0E00               	movlw	0
  1127  007742  6E8C               	movwf	3980,c	;volatile
  1128                           
  1129                           ;ConfShield2_1.c: 11: LATE = 0x00;
  1130  007744  0E00               	movlw	0
  1131  007746  6E8D               	movwf	3981,c	;volatile
  1132                           
  1133                           ;ConfShield2_1.c: 15: TRISA = 0xFF;
  1134  007748  6892               	setf	3986,c	;volatile
  1135                           
  1136                           ;ConfShield2_1.c: 17: TRISB = 0xFF;
  1137  00774A  6893               	setf	3987,c	;volatile
  1138                           
  1139                           ;ConfShield2_1.c: 18: TRISC = 0xFF;
  1140  00774C  6894               	setf	3988,c	;volatile
  1141                           
  1142                           ;ConfShield2_1.c: 22: TRISD = 0x0C;
  1143  00774E  0E0C               	movlw	12
  1144  007750  6E95               	movwf	3989,c	;volatile
  1145                           
  1146                           ;ConfShield2_1.c: 24: TRISE = 0x00;
  1147  007752  0E00               	movlw	0
  1148  007754  6E96               	movwf	3990,c	;volatile
  1149                           
  1150                           ;ConfShield2_1.c: 27: CMCON = 0x07;
  1151  007756  0E07               	movlw	7
  1152  007758  6EB4               	movwf	4020,c	;volatile
  1153                           
  1154                           ;ConfShield2_1.c: 28: ADCON1 = 0x0F;
  1155  00775A  0E0F               	movlw	15
  1156  00775C  6EC1               	movwf	4033,c	;volatile
  1157  00775E  0012               	return		;funcret
  1158  007760                     __end_of_PicIni21:
  1159                           	opt stack 0
  1160                           tblptru	equ	0xFF8
  1161                           tblptrh	equ	0xFF7
  1162                           tblptrl	equ	0xFF6
  1163                           tablat	equ	0xFF5
  1164                           intcon	equ	0xFF2
  1165                           postinc0	equ	0xFEE
  1166                           wreg	equ	0xFE8
  1167                           postdec1	equ	0xFE5
  1168                           fsr1l	equ	0xFE1
  1169                           
  1170 ;; *************** function _LCD_init *****************
  1171 ;; Defined at:
  1172 ;;		line 67 in file "lcd.c"
  1173 ;; Parameters:    Size  Location     Type
  1174 ;;		None
  1175 ;; Auto vars:     Size  Location     Type
  1176 ;;		None
  1177 ;; Return value:  Size  Location     Type
  1178 ;;                  1    wreg      void 
  1179 ;; Registers used:
  1180 ;;		wreg, status,2, status,0, cstack
  1181 ;; Tracked objects:
  1182 ;;		On entry : 0/0
  1183 ;;		On exit  : 0/0
  1184 ;;		Unchanged: 0/0
  1185 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1186 ;;      Params:         0       0       0       0       0       0       0       0       0
  1187 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1188 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1189 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1190 ;;Total ram usage:        0 bytes
  1191 ;; Hardware stack levels used:    1
  1192 ;; Hardware stack levels required when called:    6
  1193 ;; This function calls:
  1194 ;;		_read_BUSY
  1195 ;;		_write_CMD
  1196 ;; This function is called by:
  1197 ;;		_demo_shield2_1_INI
  1198 ;; This function uses a non-reentrant model
  1199 ;;
  1200                           
  1201                           	psect	text6
  1202  0079E2                     __ptext6:
  1203                           	opt stack 0
  1204  0079E2                     _LCD_init:
  1205                           	opt stack 23
  1206                           
  1207                           ;lcd.c: 68: TRISD &= 0x0F;
  1208                           
  1209                           ;incstack = 0
  1210  0079E2  0E0F               	movlw	15
  1211  0079E4  1695               	andwf	3989,f,c	;volatile
  1212                           
  1213                           ;lcd.c: 69: TRISEbits.RE2 = 0;
  1214  0079E6  9496               	bcf	3990,2,c	;volatile
  1215                           
  1216                           ;lcd.c: 70: TRISEbits.RE1 = 0;
  1217  0079E8  9296               	bcf	3990,1,c	;volatile
  1218                           
  1219                           ;lcd.c: 71: TRISEbits.RE0 = 0;
  1220  0079EA  9096               	bcf	3990,0,c	;volatile
  1221                           
  1222                           ;lcd.c: 74: LCD_tout = 30;
  1223  0079EC  0E00               	movlw	0
  1224  0079EE  6E02               	movwf	_LCD_tout+1,c
  1225  0079F0  0E1E               	movlw	30
  1226  0079F2  6E01               	movwf	_LCD_tout,c
  1227  0079F4                     l1465:
  1228  0079F4  5001               	movf	_LCD_tout,w,c
  1229  0079F6  1002               	iorwf	_LCD_tout+1,w,c
  1230  0079F8  A4D8               	btfss	status,2,c
  1231  0079FA  D7FC               	goto	l1465
  1232                           
  1233                           ;lcd.c: 77: write_CMD(0x02);
  1234  0079FC  0E02               	movlw	2
  1235  0079FE  ECB5  F03A         	call	_write_CMD
  1236                           
  1237                           ;lcd.c: 78: LCD_tout = 1;
  1238  007A02  0E00               	movlw	0
  1239  007A04  6E02               	movwf	_LCD_tout+1,c
  1240  007A06  0E01               	movlw	1
  1241  007A08  6E01               	movwf	_LCD_tout,c
  1242  007A0A                     l1471:
  1243  007A0A  5001               	movf	_LCD_tout,w,c
  1244  007A0C  1002               	iorwf	_LCD_tout+1,w,c
  1245  007A0E  A4D8               	btfss	status,2,c
  1246  007A10  D7FC               	goto	l1471
  1247                           
  1248                           ;lcd.c: 81: write_CMD(0x28);
  1249  007A12  0E28               	movlw	40
  1250  007A14  ECB5  F03A         	call	_write_CMD
  1251                           
  1252                           ;lcd.c: 82: LCD_tout = 1;
  1253  007A18  0E00               	movlw	0
  1254  007A1A  6E02               	movwf	_LCD_tout+1,c
  1255  007A1C  0E01               	movlw	1
  1256  007A1E  6E01               	movwf	_LCD_tout,c
  1257  007A20                     l1477:
  1258  007A20  5001               	movf	_LCD_tout,w,c
  1259  007A22  1002               	iorwf	_LCD_tout+1,w,c
  1260  007A24  A4D8               	btfss	status,2,c
  1261  007A26  D7FC               	goto	l1477
  1262                           
  1263                           ;lcd.c: 85: write_CMD(0x0C);
  1264  007A28  0E0C               	movlw	12
  1265  007A2A  ECB5  F03A         	call	_write_CMD
  1266                           
  1267                           ;lcd.c: 86: LCD_tout = 1;
  1268  007A2E  0E00               	movlw	0
  1269  007A30  6E02               	movwf	_LCD_tout+1,c
  1270  007A32  0E01               	movlw	1
  1271  007A34  6E01               	movwf	_LCD_tout,c
  1272  007A36                     l1483:
  1273  007A36  5001               	movf	_LCD_tout,w,c
  1274  007A38  1002               	iorwf	_LCD_tout+1,w,c
  1275  007A3A  A4D8               	btfss	status,2,c
  1276  007A3C  D7FC               	goto	l1483
  1277                           
  1278                           ;lcd.c: 89: write_CMD(0x01);
  1279  007A3E  0E01               	movlw	1
  1280  007A40  ECB5  F03A         	call	_write_CMD
  1281                           
  1282                           ;lcd.c: 90: LCD_tout = 1;
  1283  007A44  0E00               	movlw	0
  1284  007A46  6E02               	movwf	_LCD_tout+1,c
  1285  007A48  0E01               	movlw	1
  1286  007A4A  6E01               	movwf	_LCD_tout,c
  1287  007A4C                     l1489:
  1288  007A4C  5001               	movf	_LCD_tout,w,c
  1289  007A4E  1002               	iorwf	_LCD_tout+1,w,c
  1290  007A50  A4D8               	btfss	status,2,c
  1291  007A52  D7FC               	goto	l1489
  1292                           
  1293                           ;lcd.c: 93: write_CMD(0x06);
  1294  007A54  0E06               	movlw	6
  1295  007A56  ECB5  F03A         	call	_write_CMD
  1296                           
  1297                           ;lcd.c: 94: LCD_tout = 1;
  1298  007A5A  0E00               	movlw	0
  1299  007A5C  6E02               	movwf	_LCD_tout+1,c
  1300  007A5E  0E01               	movlw	1
  1301  007A60  6E01               	movwf	_LCD_tout,c
  1302  007A62                     l1495:
  1303  007A62  5001               	movf	_LCD_tout,w,c
  1304  007A64  1002               	iorwf	_LCD_tout+1,w,c
  1305  007A66  A4D8               	btfss	status,2,c
  1306  007A68  D7FC               	goto	l1495
  1307                           
  1308                           ;lcd.c: 97: read_BUSY();
  1309  007A6A  EC5B  F03B         	call	_read_BUSY	;wreg free
  1310  007A6E  0012               	return		;funcret
  1311  007A70                     __end_of_LCD_init:
  1312                           	opt stack 0
  1313                           tblptru	equ	0xFF8
  1314                           tblptrh	equ	0xFF7
  1315                           tblptrl	equ	0xFF6
  1316                           tablat	equ	0xFF5
  1317                           intcon	equ	0xFF2
  1318                           postinc0	equ	0xFEE
  1319                           wreg	equ	0xFE8
  1320                           postdec1	equ	0xFE5
  1321                           fsr1l	equ	0xFE1
  1322                           status	equ	0xFD8
  1323                           
  1324 ;; *************** function _demo_shield2_1 *****************
  1325 ;; Defined at:
  1326 ;;		line 264 in file "Tecnica1.c"
  1327 ;; Parameters:    Size  Location     Type
  1328 ;;		None
  1329 ;; Auto vars:     Size  Location     Type
  1330 ;;		None
  1331 ;; Return value:  Size  Location     Type
  1332 ;;                  1    wreg      void 
  1333 ;; Registers used:
  1334 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1335 ;; Tracked objects:
  1336 ;;		On entry : 0/0
  1337 ;;		On exit  : 0/0
  1338 ;;		Unchanged: 0/0
  1339 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1340 ;;      Params:         0       0       0       0       0       0       0       0       0
  1341 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1342 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1343 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1344 ;;Total ram usage:        0 bytes
  1345 ;; Hardware stack levels used:    1
  1346 ;; Hardware stack levels required when called:    7
  1347 ;; This function calls:
  1348 ;;		_AumentarPeriodo
  1349 ;;		_DesplazarIzquierda
  1350 ;;		_DisminuirPeriodo
  1351 ;;		___awdiv
  1352 ;;		___awmod
  1353 ;;		_char2LCD
  1354 ;;		_clear_LCD
  1355 ;;		_informar
  1356 ;;		_msg2LCD
  1357 ;;		_obtener_ADC8
  1358 ;;		_ret_HOME
  1359 ;;		_set_CURSOR
  1360 ;;		_transmitir
  1361 ;; This function is called by:
  1362 ;;		_main
  1363 ;; This function uses a non-reentrant model
  1364 ;;
  1365                           
  1366                           	psect	text7
  1367  007B3C                     __ptext7:
  1368                           	opt stack 0
  1369  007B3C                     _demo_shield2_1:
  1370                           	opt stack 23
  1371                           
  1372                           ;Tecnica1.c: 265: static unsigned char flag0=0,flag1=0,flag2=0,flag3=0,PrimeraVez=0,Desp
      +                          lazar=0;
  1373                           ;Tecnica1.c: 266: static unsigned char cont=0,cont1,cont2,cont3;
  1374                           ;Tecnica1.c: 268: if(EstadoDeLosBotones == 16 && flag0==0){
  1375                           
  1376                           ;incstack = 0
  1377  007B3C  0E10               	movlw	16
  1378  007B3E  180A               	xorwf	_EstadoDeLosBotones,w,c
  1379  007B40  A4D8               	btfss	status,2,c
  1380  007B42  D039               	goto	l2901
  1381  007B44  5020               	movf	demo_shield2_1@flag0,w,c
  1382  007B46  A4D8               	btfss	status,2,c
  1383  007B48  D036               	goto	l2901
  1384                           
  1385                           ;Tecnica1.c: 269: if(!PrimeraVez){clear_LCD();PrimeraVez=1;}
  1386  007B4A  501B               	movf	demo_shield2_1@PrimeraVez,w,c
  1387  007B4C  A4D8               	btfss	status,2,c
  1388  007B4E  D004               	goto	l2873
  1389  007B50  ECA9  F03A         	call	_clear_LCD	;wreg free
  1390  007B54  0E01               	movlw	1
  1391  007B56  6E1B               	movwf	demo_shield2_1@PrimeraVez,c
  1392  007B58                     l2873:
  1393                           
  1394                           ;Tecnica1.c: 270: ret_HOME();
  1395  007B58  ECAF  F03A         	call	_ret_HOME	;wreg free
  1396                           
  1397                           ;Tecnica1.c: 271: msg2LCD("BOT1");
  1398  007B5C  0E54               	movlw	low STR_2
  1399  007B5E  6E37               	movwf	msg2LCD@datos,c
  1400  007B60  0E20               	movlw	high STR_2
  1401  007B62  6E38               	movwf	msg2LCD@datos+1,c
  1402  007B64  ECB0  F03B         	call	_msg2LCD	;wreg free
  1403                           
  1404                           ;Tecnica1.c: 272: flag0=1;
  1405  007B68  0E01               	movlw	1
  1406  007B6A  6E20               	movwf	demo_shield2_1@flag0,c
  1407                           
  1408                           ;Tecnica1.c: 273: Desplazar = 0;
  1409  007B6C  0E00               	movlw	0
  1410  007B6E  6E1A               	movwf	demo_shield2_1@Desplazar,c
  1411                           
  1412                           ;Tecnica1.c: 274: AumentarPeriodo(10);
  1413  007B70  0E0A               	movlw	10
  1414  007B72  EC08  F03B         	call	_AumentarPeriodo
  1415                           
  1416                           ;Tecnica1.c: 275: if(cont<9)cont++;
  1417  007B76  0E09               	movlw	9
  1418  007B78  601C               	cpfslt	demo_shield2_1@cont,c
  1419  007B7A  D002               	goto	l2887
  1420  007B7C  2A1C               	incf	demo_shield2_1@cont,f,c
  1421  007B7E  D002               	goto	l2889
  1422  007B80                     l2887:
  1423                           
  1424                           ;Tecnica1.c: 276: else cont =0;
  1425  007B80  0E00               	movlw	0
  1426  007B82  6E1C               	movwf	demo_shield2_1@cont,c
  1427  007B84                     l2889:
  1428                           
  1429                           ;Tecnica1.c: 277: set_CURSOR(0x40);
  1430  007B84  0E40               	movlw	64
  1431  007B86  ECDA  F03A         	call	_set_CURSOR
  1432                           
  1433                           ;Tecnica1.c: 278: char2LCD(cont+0x30);
  1434  007B8A  501C               	movf	demo_shield2_1@cont,w,c
  1435  007B8C  0F30               	addlw	48
  1436  007B8E  ECC3  F03A         	call	_char2LCD
  1437                           
  1438                           ;Tecnica1.c: 279: informar("BOT1 ",sizeof("BOT1 "));
  1439  007B92  0E4E               	movlw	low STR_3
  1440  007B94  6E36               	movwf	informar@dato,c
  1441  007B96  0E20               	movlw	high STR_3
  1442  007B98  6E37               	movwf	informar@dato+1,c
  1443  007B9A  0E06               	movlw	6
  1444  007B9C  6E38               	movwf	informar@longitud,c
  1445  007B9E  ECFA  F03B         	call	_informar	;wreg free
  1446                           
  1447                           ;Tecnica1.c: 280: transmitir(cont+0x30);
  1448  007BA2  501C               	movf	demo_shield2_1@cont,w,c
  1449  007BA4  0F30               	addlw	48
  1450  007BA6  ECD2  F03A         	call	_transmitir
  1451                           
  1452                           ;Tecnica1.c: 281: transmitir('\n');
  1453  007BAA  0E0A               	movlw	10
  1454  007BAC  ECD2  F03A         	call	_transmitir
  1455                           
  1456                           ;Tecnica1.c: 282: transmitir('\r');
  1457  007BB0  0E0D               	movlw	13
  1458  007BB2  ECD2  F03A         	call	_transmitir
  1459  007BB6                     l2901:
  1460                           
  1461                           ;Tecnica1.c: 283: }
  1462                           ;Tecnica1.c: 284: if(EstadoDeLosBotones == 32 && !flag1){
  1463  007BB6  0E20               	movlw	32
  1464  007BB8  180A               	xorwf	_EstadoDeLosBotones,w,c
  1465  007BBA  A4D8               	btfss	status,2,c
  1466  007BBC  D025               	goto	l2929
  1467  007BBE  5021               	movf	demo_shield2_1@flag1,w,c
  1468  007BC0  A4D8               	btfss	status,2,c
  1469  007BC2  D022               	goto	l2929
  1470                           
  1471                           ;Tecnica1.c: 285: if(!PrimeraVez){clear_LCD();PrimeraVez=1;}
  1472  007BC4  501B               	movf	demo_shield2_1@PrimeraVez,w,c
  1473  007BC6  A4D8               	btfss	status,2,c
  1474  007BC8  D004               	goto	l2911
  1475  007BCA  ECA9  F03A         	call	_clear_LCD	;wreg free
  1476  007BCE  0E01               	movlw	1
  1477  007BD0  6E1B               	movwf	demo_shield2_1@PrimeraVez,c
  1478  007BD2                     l2911:
  1479                           
  1480                           ;Tecnica1.c: 286: ret_HOME();
  1481  007BD2  ECAF  F03A         	call	_ret_HOME	;wreg free
  1482                           
  1483                           ;Tecnica1.c: 287: msg2LCD("BOT2");
  1484  007BD6  0E59               	movlw	low STR_5
  1485  007BD8  6E37               	movwf	msg2LCD@datos,c
  1486  007BDA  0E20               	movlw	high STR_5
  1487  007BDC  6E38               	movwf	msg2LCD@datos+1,c
  1488  007BDE  ECB0  F03B         	call	_msg2LCD	;wreg free
  1489                           
  1490                           ;Tecnica1.c: 288: flag1=1;
  1491  007BE2  0E01               	movlw	1
  1492  007BE4  6E21               	movwf	demo_shield2_1@flag1,c
  1493                           
  1494                           ;Tecnica1.c: 289: DisminuirPeriodo(10);
  1495  007BE6  0E0A               	movlw	10
  1496  007BE8  EC28  F03B         	call	_DisminuirPeriodo
  1497                           
  1498                           ;Tecnica1.c: 290: if(cont1<9)cont1++;
  1499  007BEC  0E09               	movlw	9
  1500  007BEE  601D               	cpfslt	demo_shield2_1@cont1,c
  1501  007BF0  D002               	goto	l2923
  1502  007BF2  2A1D               	incf	demo_shield2_1@cont1,f,c
  1503  007BF4  D002               	goto	l2925
  1504  007BF6                     l2923:
  1505                           
  1506                           ;Tecnica1.c: 291: else cont1 =0;
  1507  007BF6  0E00               	movlw	0
  1508  007BF8  6E1D               	movwf	demo_shield2_1@cont1,c
  1509  007BFA                     l2925:
  1510                           
  1511                           ;Tecnica1.c: 292: set_CURSOR(0x42);
  1512  007BFA  0E42               	movlw	66
  1513  007BFC  ECDA  F03A         	call	_set_CURSOR
  1514                           
  1515                           ;Tecnica1.c: 293: char2LCD(cont1+0x30);
  1516  007C00  501D               	movf	demo_shield2_1@cont1,w,c
  1517  007C02  0F30               	addlw	48
  1518  007C04  ECC3  F03A         	call	_char2LCD
  1519  007C08                     l2929:
  1520                           
  1521                           ;Tecnica1.c: 295: }
  1522                           ;Tecnica1.c: 296: if(EstadoDeLosBotones == 64 && flag2==0){
  1523  007C08  0E40               	movlw	64
  1524  007C0A  180A               	xorwf	_EstadoDeLosBotones,w,c
  1525  007C0C  A4D8               	btfss	status,2,c
  1526  007C0E  D025               	goto	l2957
  1527  007C10  5022               	movf	demo_shield2_1@flag2,w,c
  1528  007C12  A4D8               	btfss	status,2,c
  1529  007C14  D022               	goto	l2957
  1530                           
  1531                           ;Tecnica1.c: 297: if(!PrimeraVez){clear_LCD();PrimeraVez=1;}
  1532  007C16  501B               	movf	demo_shield2_1@PrimeraVez,w,c
  1533  007C18  A4D8               	btfss	status,2,c
  1534  007C1A  D004               	goto	l2939
  1535  007C1C  ECA9  F03A         	call	_clear_LCD	;wreg free
  1536  007C20  0E01               	movlw	1
  1537  007C22  6E1B               	movwf	demo_shield2_1@PrimeraVez,c
  1538  007C24                     l2939:
  1539                           
  1540                           ;Tecnica1.c: 298: ret_HOME();
  1541  007C24  ECAF  F03A         	call	_ret_HOME	;wreg free
  1542                           
  1543                           ;Tecnica1.c: 299: msg2LCD("BOT3");
  1544  007C28  0E5E               	movlw	low STR_6
  1545  007C2A  6E37               	movwf	msg2LCD@datos,c
  1546  007C2C  0E20               	movlw	high STR_6
  1547  007C2E  6E38               	movwf	msg2LCD@datos+1,c
  1548  007C30  ECB0  F03B         	call	_msg2LCD	;wreg free
  1549                           
  1550                           ;Tecnica1.c: 300: flag2=1;
  1551  007C34  0E01               	movlw	1
  1552  007C36  6E22               	movwf	demo_shield2_1@flag2,c
  1553                           
  1554                           ;Tecnica1.c: 301: AumentarPeriodo(100);
  1555  007C38  0E64               	movlw	100
  1556  007C3A  EC08  F03B         	call	_AumentarPeriodo
  1557                           
  1558                           ;Tecnica1.c: 302: if(cont2<9)cont2++;
  1559  007C3E  0E09               	movlw	9
  1560  007C40  601E               	cpfslt	demo_shield2_1@cont2,c
  1561  007C42  D002               	goto	l2951
  1562  007C44  2A1E               	incf	demo_shield2_1@cont2,f,c
  1563  007C46  D002               	goto	l2953
  1564  007C48                     l2951:
  1565                           
  1566                           ;Tecnica1.c: 303: else cont2 =0;
  1567  007C48  0E00               	movlw	0
  1568  007C4A  6E1E               	movwf	demo_shield2_1@cont2,c
  1569  007C4C                     l2953:
  1570                           
  1571                           ;Tecnica1.c: 304: set_CURSOR(0x44);
  1572  007C4C  0E44               	movlw	68
  1573  007C4E  ECDA  F03A         	call	_set_CURSOR
  1574                           
  1575                           ;Tecnica1.c: 305: char2LCD(cont2+0x30);
  1576  007C52  501E               	movf	demo_shield2_1@cont2,w,c
  1577  007C54  0F30               	addlw	48
  1578  007C56  ECC3  F03A         	call	_char2LCD
  1579  007C5A                     l2957:
  1580                           
  1581                           ;Tecnica1.c: 307: }
  1582                           ;Tecnica1.c: 308: if(EstadoDeLosBotones == 128 && flag3==0){
  1583  007C5A  0E80               	movlw	128
  1584  007C5C  180A               	xorwf	_EstadoDeLosBotones,w,c
  1585  007C5E  A4D8               	btfss	status,2,c
  1586  007C60  D05E               	goto	l2995
  1587  007C62  5023               	movf	demo_shield2_1@flag3,w,c
  1588  007C64  A4D8               	btfss	status,2,c
  1589  007C66  D05B               	goto	l2995
  1590                           
  1591                           ;Tecnica1.c: 309: if(!PrimeraVez){clear_LCD();PrimeraVez=1;}
  1592  007C68  501B               	movf	demo_shield2_1@PrimeraVez,w,c
  1593  007C6A  A4D8               	btfss	status,2,c
  1594  007C6C  D004               	goto	l2967
  1595  007C6E  ECA9  F03A         	call	_clear_LCD	;wreg free
  1596  007C72  0E01               	movlw	1
  1597  007C74  6E1B               	movwf	demo_shield2_1@PrimeraVez,c
  1598  007C76                     l2967:
  1599                           
  1600                           ;Tecnica1.c: 310: ret_HOME();
  1601  007C76  ECAF  F03A         	call	_ret_HOME	;wreg free
  1602                           
  1603                           ;Tecnica1.c: 311: msg2LCD("BOT4");
  1604  007C7A  0E63               	movlw	low STR_7
  1605  007C7C  6E37               	movwf	msg2LCD@datos,c
  1606  007C7E  0E20               	movlw	high STR_7
  1607  007C80  6E38               	movwf	msg2LCD@datos+1,c
  1608  007C82  ECB0  F03B         	call	_msg2LCD	;wreg free
  1609                           
  1610                           ;Tecnica1.c: 312: flag3=1;
  1611  007C86  0E01               	movlw	1
  1612  007C88  6E23               	movwf	demo_shield2_1@flag3,c
  1613                           
  1614                           ;Tecnica1.c: 314: if(cont3<9)cont3++;
  1615  007C8A  0E09               	movlw	9
  1616  007C8C  601F               	cpfslt	demo_shield2_1@cont3,c
  1617  007C8E  D002               	goto	l2977
  1618  007C90  2A1F               	incf	demo_shield2_1@cont3,f,c
  1619  007C92  D002               	goto	l2979
  1620  007C94                     l2977:
  1621                           
  1622                           ;Tecnica1.c: 315: else cont3 =0;
  1623  007C94  0E00               	movlw	0
  1624  007C96  6E1F               	movwf	demo_shield2_1@cont3,c
  1625  007C98                     l2979:
  1626                           
  1627                           ;Tecnica1.c: 316: set_CURSOR(0x46);
  1628  007C98  0E46               	movlw	70
  1629  007C9A  ECDA  F03A         	call	_set_CURSOR
  1630                           
  1631                           ;Tecnica1.c: 317: char2LCD(cont3+0x30);
  1632  007C9E  501F               	movf	demo_shield2_1@cont3,w,c
  1633  007CA0  0F30               	addlw	48
  1634  007CA2  ECC3  F03A         	call	_char2LCD
  1635                           
  1636                           ;Tecnica1.c: 319: obtener_ADC8();
  1637  007CA6  EC84  F03B         	call	_obtener_ADC8	;wreg free
  1638                           
  1639                           ;Tecnica1.c: 320: set_CURSOR(0x4A);
  1640  007CAA  0E4A               	movlw	74
  1641  007CAC  ECDA  F03A         	call	_set_CURSOR
  1642                           
  1643                           ;Tecnica1.c: 321: char2LCD(ADRESH/100+0x30);
  1644  007CB0  CFC4 F03B          	movff	4036,___awdiv@dividend	;volatile
  1645  007CB4  6A3C               	clrf	___awdiv@dividend+1,c
  1646  007CB6  0E00               	movlw	0
  1647  007CB8  6E3E               	movwf	___awdiv@divisor+1,c
  1648  007CBA  0E64               	movlw	100
  1649  007CBC  6E3D               	movwf	___awdiv@divisor,c
  1650  007CBE  EC6C  F03C         	call	___awdiv	;wreg free
  1651  007CC2  503B               	movf	?___awdiv,w,c
  1652  007CC4  0F30               	addlw	48
  1653  007CC6  ECC3  F03A         	call	_char2LCD
  1654                           
  1655                           ;Tecnica1.c: 322: char2LCD((ADRESH%100)/10+0x30);
  1656  007CCA  0E00               	movlw	0
  1657  007CCC  6E38               	movwf	___awmod@divisor+1,c
  1658  007CCE  0E64               	movlw	100
  1659  007CD0  6E37               	movwf	___awmod@divisor,c
  1660  007CD2  CFC4 F035          	movff	4036,___awmod@dividend	;volatile
  1661  007CD6  6A36               	clrf	___awmod@dividend+1,c
  1662  007CD8  EC34  F03C         	call	___awmod	;wreg free
  1663  007CDC  C035  F03B         	movff	?___awmod,___awdiv@dividend
  1664  007CE0  C036  F03C         	movff	?___awmod+1,___awdiv@dividend+1
  1665  007CE4  0E00               	movlw	0
  1666  007CE6  6E3E               	movwf	___awdiv@divisor+1,c
  1667  007CE8  0E0A               	movlw	10
  1668  007CEA  6E3D               	movwf	___awdiv@divisor,c
  1669  007CEC  EC6C  F03C         	call	___awdiv	;wreg free
  1670  007CF0  503B               	movf	?___awdiv,w,c
  1671  007CF2  0F30               	addlw	48
  1672  007CF4  ECC3  F03A         	call	_char2LCD
  1673                           
  1674                           ;Tecnica1.c: 323: char2LCD((ADRESH%10)+0x30);
  1675  007CF8  CFC4 F035          	movff	4036,___awmod@dividend	;volatile
  1676  007CFC  6A36               	clrf	___awmod@dividend+1,c
  1677  007CFE  0E00               	movlw	0
  1678  007D00  6E38               	movwf	___awmod@divisor+1,c
  1679  007D02  0E0A               	movlw	10
  1680  007D04  6E37               	movwf	___awmod@divisor,c
  1681  007D06  EC34  F03C         	call	___awmod	;wreg free
  1682  007D0A  5035               	movf	?___awmod,w,c
  1683  007D0C  0F30               	addlw	48
  1684  007D0E  ECC3  F03A         	call	_char2LCD
  1685                           
  1686                           ;Tecnica1.c: 324: msg2LCD("   **Frase escondida :-) **");
  1687  007D12  0E25               	movlw	low STR_8
  1688  007D14  6E37               	movwf	msg2LCD@datos,c
  1689  007D16  0E20               	movlw	high STR_8
  1690  007D18  6E38               	movwf	msg2LCD@datos+1,c
  1691  007D1A  ECB0  F03B         	call	_msg2LCD	;wreg free
  1692  007D1E                     l2995:
  1693                           
  1694                           ;Tecnica1.c: 325: }
  1695                           ;Tecnica1.c: 326: if(EstadoDeLosBotones == (16+32) && (!flag0 || !flag1)){
  1696  007D1E  0E30               	movlw	48
  1697  007D20  180A               	xorwf	_EstadoDeLosBotones,w,c
  1698  007D22  A4D8               	btfss	status,2,c
  1699  007D24  D00C               	goto	l487
  1700  007D26  5020               	movf	demo_shield2_1@flag0,w,c
  1701  007D28  B4D8               	btfsc	status,2,c
  1702  007D2A  D003               	goto	l3001
  1703  007D2C  5021               	movf	demo_shield2_1@flag1,w,c
  1704  007D2E  A4D8               	btfss	status,2,c
  1705  007D30  D006               	goto	l487
  1706  007D32                     l3001:
  1707                           
  1708                           ;Tecnica1.c: 327: Desplazar = 1;
  1709  007D32  0E01               	movlw	1
  1710  007D34  6E1A               	movwf	demo_shield2_1@Desplazar,c
  1711                           
  1712                           ;Tecnica1.c: 328: flag0=1;flag1=1;
  1713  007D36  0E01               	movlw	1
  1714  007D38  6E20               	movwf	demo_shield2_1@flag0,c
  1715  007D3A  0E01               	movlw	1
  1716  007D3C  6E21               	movwf	demo_shield2_1@flag1,c
  1717  007D3E                     l487:
  1718                           
  1719                           ;Tecnica1.c: 329: }
  1720                           ;Tecnica1.c: 330: if(!EstadoDeLosBotones && flag3==1)flag3=0;
  1721  007D3E  500A               	movf	_EstadoDeLosBotones,w,c
  1722  007D40  A4D8               	btfss	status,2,c
  1723  007D42  D005               	goto	l490
  1724  007D44  0423               	decf	demo_shield2_1@flag3,w,c
  1725  007D46  A4D8               	btfss	status,2,c
  1726  007D48  D002               	goto	l490
  1727  007D4A  0E00               	movlw	0
  1728  007D4C  6E23               	movwf	demo_shield2_1@flag3,c
  1729  007D4E                     l490:
  1730                           
  1731                           ;Tecnica1.c: 331: if(!EstadoDeLosBotones && flag2==1)flag2=0;
  1732  007D4E  500A               	movf	_EstadoDeLosBotones,w,c
  1733  007D50  A4D8               	btfss	status,2,c
  1734  007D52  D005               	goto	l491
  1735  007D54  0422               	decf	demo_shield2_1@flag2,w,c
  1736  007D56  A4D8               	btfss	status,2,c
  1737  007D58  D002               	goto	l491
  1738  007D5A  0E00               	movlw	0
  1739  007D5C  6E22               	movwf	demo_shield2_1@flag2,c
  1740  007D5E                     l491:
  1741                           
  1742                           ;Tecnica1.c: 332: if(!EstadoDeLosBotones && flag1==1)flag1=0;
  1743  007D5E  500A               	movf	_EstadoDeLosBotones,w,c
  1744  007D60  A4D8               	btfss	status,2,c
  1745  007D62  D005               	goto	l492
  1746  007D64  0421               	decf	demo_shield2_1@flag1,w,c
  1747  007D66  A4D8               	btfss	status,2,c
  1748  007D68  D002               	goto	l492
  1749  007D6A  0E00               	movlw	0
  1750  007D6C  6E21               	movwf	demo_shield2_1@flag1,c
  1751  007D6E                     l492:
  1752                           
  1753                           ;Tecnica1.c: 333: if(!EstadoDeLosBotones && flag0==1)flag0=0;
  1754  007D6E  500A               	movf	_EstadoDeLosBotones,w,c
  1755  007D70  A4D8               	btfss	status,2,c
  1756  007D72  D005               	goto	l493
  1757  007D74  0420               	decf	demo_shield2_1@flag0,w,c
  1758  007D76  A4D8               	btfss	status,2,c
  1759  007D78  D002               	goto	l493
  1760  007D7A  0E00               	movlw	0
  1761  007D7C  6E20               	movwf	demo_shield2_1@flag0,c
  1762  007D7E                     l493:
  1763                           
  1764                           ;Tecnica1.c: 335: if(Desplazar && !desplazar_tout){
  1765  007D7E  501A               	movf	demo_shield2_1@Desplazar,w,c
  1766  007D80  B4D8               	btfsc	status,2,c
  1767  007D82  0012               	return	
  1768  007D84  5005               	movf	_desplazar_tout,w,c
  1769  007D86  1006               	iorwf	_desplazar_tout+1,w,c
  1770  007D88  A4D8               	btfss	status,2,c
  1771  007D8A  0012               	return	
  1772                           
  1773                           ;Tecnica1.c: 336: DesplazarIzquierda();
  1774  007D8C  ECA3  F03A         	call	_DesplazarIzquierda	;wreg free
  1775                           
  1776                           ;Tecnica1.c: 337: desplazar_tout=400;
  1777  007D90  0E01               	movlw	1
  1778  007D92  6E06               	movwf	_desplazar_tout+1,c
  1779  007D94  0E90               	movlw	144
  1780  007D96  6E05               	movwf	_desplazar_tout,c
  1781  007D98  0012               	return	
  1782  007D9A                     __end_of_demo_shield2_1:
  1783                           	opt stack 0
  1784                           tblptru	equ	0xFF8
  1785                           tblptrh	equ	0xFF7
  1786                           tblptrl	equ	0xFF6
  1787                           tablat	equ	0xFF5
  1788                           intcon	equ	0xFF2
  1789                           postinc0	equ	0xFEE
  1790                           wreg	equ	0xFE8
  1791                           postdec1	equ	0xFE5
  1792                           fsr1l	equ	0xFE1
  1793                           status	equ	0xFD8
  1794                           
  1795 ;; *************** function _set_CURSOR *****************
  1796 ;; Defined at:
  1797 ;;		line 56 in file "lcd.c"
  1798 ;; Parameters:    Size  Location     Type
  1799 ;;  posi            1    wreg     unsigned char 
  1800 ;; Auto vars:     Size  Location     Type
  1801 ;;  posi            1   18[COMRAM] unsigned char 
  1802 ;; Return value:  Size  Location     Type
  1803 ;;                  1    wreg      void 
  1804 ;; Registers used:
  1805 ;;		wreg, status,2, status,0, cstack
  1806 ;; Tracked objects:
  1807 ;;		On entry : 0/0
  1808 ;;		On exit  : 0/0
  1809 ;;		Unchanged: 0/0
  1810 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1811 ;;      Params:         0       0       0       0       0       0       0       0       0
  1812 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1813 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1814 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1815 ;;Total ram usage:        1 bytes
  1816 ;; Hardware stack levels used:    1
  1817 ;; Hardware stack levels required when called:    6
  1818 ;; This function calls:
  1819 ;;		_read_BUSY
  1820 ;;		_write_CMD
  1821 ;; This function is called by:
  1822 ;;		_demo_shield2_1
  1823 ;; This function uses a non-reentrant model
  1824 ;;
  1825                           
  1826                           	psect	text8
  1827  0075B4                     __ptext8:
  1828                           	opt stack 0
  1829  0075B4                     _set_CURSOR:
  1830                           	opt stack 23
  1831                           
  1832                           ;incstack = 0
  1833                           ;set_CURSOR@posi stored from wreg
  1834  0075B4  6E37               	movwf	set_CURSOR@posi,c
  1835                           
  1836                           ;lcd.c: 57: posi |= 0x80;
  1837  0075B6  8E37               	bsf	set_CURSOR@posi,7,c
  1838                           
  1839                           ;lcd.c: 58: write_CMD(posi);
  1840  0075B8  5037               	movf	set_CURSOR@posi,w,c
  1841  0075BA  ECB5  F03A         	call	_write_CMD
  1842                           
  1843                           ;lcd.c: 59: read_BUSY();
  1844  0075BE  EC5B  F03B         	call	_read_BUSY	;wreg free
  1845  0075C2  0012               	return		;funcret
  1846  0075C4                     __end_of_set_CURSOR:
  1847                           	opt stack 0
  1848                           tblptru	equ	0xFF8
  1849                           tblptrh	equ	0xFF7
  1850                           tblptrl	equ	0xFF6
  1851                           tablat	equ	0xFF5
  1852                           intcon	equ	0xFF2
  1853                           postinc0	equ	0xFEE
  1854                           wreg	equ	0xFE8
  1855                           postdec1	equ	0xFE5
  1856                           fsr1l	equ	0xFE1
  1857                           status	equ	0xFD8
  1858                           
  1859 ;; *************** function _ret_HOME *****************
  1860 ;; Defined at:
  1861 ;;		line 50 in file "lcd.c"
  1862 ;; Parameters:    Size  Location     Type
  1863 ;;		None
  1864 ;; Auto vars:     Size  Location     Type
  1865 ;;		None
  1866 ;; Return value:  Size  Location     Type
  1867 ;;                  1    wreg      void 
  1868 ;; Registers used:
  1869 ;;		wreg, status,2, status,0, cstack
  1870 ;; Tracked objects:
  1871 ;;		On entry : 0/0
  1872 ;;		On exit  : 0/0
  1873 ;;		Unchanged: 0/0
  1874 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1875 ;;      Params:         0       0       0       0       0       0       0       0       0
  1876 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1877 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1878 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1879 ;;Total ram usage:        0 bytes
  1880 ;; Hardware stack levels used:    1
  1881 ;; Hardware stack levels required when called:    6
  1882 ;; This function calls:
  1883 ;;		_read_BUSY
  1884 ;;		_write_CMD
  1885 ;; This function is called by:
  1886 ;;		_demo_shield2_1
  1887 ;; This function uses a non-reentrant model
  1888 ;;
  1889                           
  1890                           	psect	text9
  1891  00755E                     __ptext9:
  1892                           	opt stack 0
  1893  00755E                     _ret_HOME:
  1894                           	opt stack 23
  1895                           
  1896                           ;lcd.c: 51: write_CMD(0x02);
  1897                           
  1898                           ;incstack = 0
  1899  00755E  0E02               	movlw	2
  1900  007560  ECB5  F03A         	call	_write_CMD
  1901                           
  1902                           ;lcd.c: 52: read_BUSY();
  1903  007564  EC5B  F03B         	call	_read_BUSY	;wreg free
  1904  007568  0012               	return		;funcret
  1905  00756A                     __end_of_ret_HOME:
  1906                           	opt stack 0
  1907                           tblptru	equ	0xFF8
  1908                           tblptrh	equ	0xFF7
  1909                           tblptrl	equ	0xFF6
  1910                           tablat	equ	0xFF5
  1911                           intcon	equ	0xFF2
  1912                           postinc0	equ	0xFEE
  1913                           wreg	equ	0xFE8
  1914                           postdec1	equ	0xFE5
  1915                           fsr1l	equ	0xFE1
  1916                           status	equ	0xFD8
  1917                           
  1918 ;; *************** function _obtener_ADC8 *****************
  1919 ;; Defined at:
  1920 ;;		line 126 in file "Tecnica1.c"
  1921 ;; Parameters:    Size  Location     Type
  1922 ;;		None
  1923 ;; Auto vars:     Size  Location     Type
  1924 ;;  GuardoTrisa     1   17[COMRAM] unsigned char 
  1925 ;;  GuardoPorta     1   16[COMRAM] unsigned char 
  1926 ;; Return value:  Size  Location     Type
  1927 ;;                  1    wreg      unsigned char 
  1928 ;; Registers used:
  1929 ;;		wreg, status,2
  1930 ;; Tracked objects:
  1931 ;;		On entry : 0/0
  1932 ;;		On exit  : 0/0
  1933 ;;		Unchanged: 0/0
  1934 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1935 ;;      Params:         0       0       0       0       0       0       0       0       0
  1936 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1937 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1938 ;;      Totals:         2       0       0       0       0       0       0       0       0
  1939 ;;Total ram usage:        2 bytes
  1940 ;; Hardware stack levels used:    1
  1941 ;; Hardware stack levels required when called:    4
  1942 ;; This function calls:
  1943 ;;		Nothing
  1944 ;; This function is called by:
  1945 ;;		_demo_shield2_1
  1946 ;; This function uses a non-reentrant model
  1947 ;;
  1948                           
  1949                           	psect	text10
  1950  007708                     __ptext10:
  1951                           	opt stack 0
  1952  007708                     _obtener_ADC8:
  1953                           	opt stack 25
  1954                           
  1955                           ;Tecnica1.c: 127: unsigned char GuardoPorta,GuardoTrisa;
  1956                           ;Tecnica1.c: 129: GuardoPorta = PORTA;
  1957                           
  1958                           ;incstack = 0
  1959  007708  CF80 F035          	movff	3968,obtener_ADC8@GuardoPorta	;volatile
  1960                           
  1961                           ;Tecnica1.c: 130: GuardoTrisa = TRISA;
  1962  00770C  CF92 F036          	movff	3986,obtener_ADC8@GuardoTrisa	;volatile
  1963                           
  1964                           ;Tecnica1.c: 132: TRISAbits.RA0=1;
  1965  007710  8092               	bsf	3986,0,c	;volatile
  1966                           
  1967                           ;Tecnica1.c: 133: ADCON1 = 0x0E;
  1968  007712  0E0E               	movlw	14
  1969  007714  6EC1               	movwf	4033,c	;volatile
  1970                           
  1971                           ;Tecnica1.c: 135: ADCON2 = 0x2D;
  1972  007716  0E2D               	movlw	45
  1973  007718  6EC0               	movwf	4032,c	;volatile
  1974                           
  1975                           ;Tecnica1.c: 136: ADCON0bits.ADON=1;
  1976  00771A  80C2               	bsf	4034,0,c	;volatile
  1977                           
  1978                           ;Tecnica1.c: 137: ADCON0bits.GO=1;
  1979  00771C  82C2               	bsf	4034,1,c	;volatile
  1980  00771E                     l404:
  1981  00771E  B2C2               	btfsc	4034,1,c	;volatile
  1982  007720  D7FE               	goto	l404
  1983                           
  1984                           ;Tecnica1.c: 141: ADCON0bits.ADON=0;
  1985  007722  90C2               	bcf	4034,0,c	;volatile
  1986                           
  1987                           ;Tecnica1.c: 142: ADCON1 = 0x0F;
  1988  007724  0E0F               	movlw	15
  1989  007726  6EC1               	movwf	4033,c	;volatile
  1990                           
  1991                           ;Tecnica1.c: 143: LATA = GuardoPorta;
  1992  007728  C035  FF89         	movff	obtener_ADC8@GuardoPorta,3977	;volatile
  1993                           
  1994                           ;Tecnica1.c: 144: TRISA = GuardoTrisa;
  1995  00772C  C036  FF92         	movff	obtener_ADC8@GuardoTrisa,3986	;volatile
  1996                           
  1997                           ;Tecnica1.c: 146: return ADRESH;
  1998                           ;	Return value of _obtener_ADC8 is never used
  1999  007730  50C4               	movf	4036,w,c	;volatile
  2000  007732  0012               	return	
  2001  007734                     __end_of_obtener_ADC8:
  2002                           	opt stack 0
  2003                           tblptru	equ	0xFF8
  2004                           tblptrh	equ	0xFF7
  2005                           tblptrl	equ	0xFF6
  2006                           tablat	equ	0xFF5
  2007                           intcon	equ	0xFF2
  2008                           postinc0	equ	0xFEE
  2009                           wreg	equ	0xFE8
  2010                           postdec1	equ	0xFE5
  2011                           fsr1l	equ	0xFE1
  2012                           status	equ	0xFD8
  2013                           
  2014 ;; *************** function _msg2LCD *****************
  2015 ;; Defined at:
  2016 ;;		line 27 in file "lcd.c"
  2017 ;; Parameters:    Size  Location     Type
  2018 ;;  datos           2   18[COMRAM] PTR const unsigned char 
  2019 ;;		 -> STR_8(28), STR_7(5), STR_6(5), STR_5(5), 
  2020 ;;		 -> STR_2(5), STR_1(13), 
  2021 ;; Auto vars:     Size  Location     Type
  2022 ;;		None
  2023 ;; Return value:  Size  Location     Type
  2024 ;;                  1    wreg      void 
  2025 ;; Registers used:
  2026 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2027 ;; Tracked objects:
  2028 ;;		On entry : 0/0
  2029 ;;		On exit  : 0/0
  2030 ;;		Unchanged: 0/0
  2031 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2032 ;;      Params:         2       0       0       0       0       0       0       0       0
  2033 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2034 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2035 ;;      Totals:         2       0       0       0       0       0       0       0       0
  2036 ;;Total ram usage:        2 bytes
  2037 ;; Hardware stack levels used:    1
  2038 ;; Hardware stack levels required when called:    6
  2039 ;; This function calls:
  2040 ;;		_read_BUSY
  2041 ;;		_write_DATA
  2042 ;; This function is called by:
  2043 ;;		_demo_shield2_1_INI
  2044 ;;		_demo_shield2_1
  2045 ;; This function uses a non-reentrant model
  2046 ;;
  2047                           
  2048                           	psect	text11
  2049  007760                     __ptext11:
  2050                           	opt stack 0
  2051  007760                     _msg2LCD:
  2052                           	opt stack 23
  2053                           
  2054                           ;lcd.c: 29: while (*datos != 0){
  2055                           
  2056                           ;incstack = 0
  2057  007760  D00C               	goto	l2425
  2058  007762                     l2419:
  2059                           
  2060                           ;lcd.c: 30: write_DATA(*datos);
  2061  007762  C037  FFF6         	movff	msg2LCD@datos,tblptrl
  2062  007766  C038  FFF7         	movff	msg2LCD@datos+1,tblptrh
  2063  00776A                     	if	0	;tblptru may be non-zero
  2064  00776A                     	endif
  2065  00776A                     	if	0	;tblptru may be non-zero
  2066  00776A                     	endif
  2067  00776A  0008               	tblrd		*
  2068  00776C  50F5               	movf	tablat,w,c
  2069  00776E  ECBC  F03A         	call	_write_DATA
  2070                           
  2071                           ;lcd.c: 31: read_BUSY();
  2072  007772  EC5B  F03B         	call	_read_BUSY	;wreg free
  2073                           
  2074                           ;lcd.c: 32: datos++;
  2075  007776  4A37               	infsnz	msg2LCD@datos,f,c
  2076  007778  2A38               	incf	msg2LCD@datos+1,f,c
  2077  00777A                     l2425:
  2078  00777A  C037  FFF6         	movff	msg2LCD@datos,tblptrl
  2079  00777E  C038  FFF7         	movff	msg2LCD@datos+1,tblptrh
  2080  007782                     	if	0	;tblptru may be non-zero
  2081  007782                     	endif
  2082  007782                     	if	0	;tblptru may be non-zero
  2083  007782                     	endif
  2084  007782  0008               	tblrd		*
  2085  007784  50F5               	movf	tablat,w,c
  2086  007786  0900               	iorlw	0
  2087  007788  B4D8               	btfsc	status,2,c
  2088  00778A  0012               	return	
  2089  00778C  D7EA               	goto	l2419
  2090  00778E                     __end_of_msg2LCD:
  2091                           	opt stack 0
  2092                           tblptru	equ	0xFF8
  2093                           tblptrh	equ	0xFF7
  2094                           tblptrl	equ	0xFF6
  2095                           tablat	equ	0xFF5
  2096                           intcon	equ	0xFF2
  2097                           postinc0	equ	0xFEE
  2098                           wreg	equ	0xFE8
  2099                           postdec1	equ	0xFE5
  2100                           fsr1l	equ	0xFE1
  2101                           status	equ	0xFD8
  2102                           
  2103 ;; *************** function _informar *****************
  2104 ;; Defined at:
  2105 ;;		line 112 in file "Tecnica1.c"
  2106 ;; Parameters:    Size  Location     Type
  2107 ;;  dato            2   17[COMRAM] PTR const unsigned char 
  2108 ;;		 -> STR_3(6), 
  2109 ;;  longitud        1   19[COMRAM] unsigned char 
  2110 ;; Auto vars:     Size  Location     Type
  2111 ;;  i               1   22[COMRAM] unsigned char 
  2112 ;; Return value:  Size  Location     Type
  2113 ;;                  1    wreg      void 
  2114 ;; Registers used:
  2115 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2116 ;; Tracked objects:
  2117 ;;		On entry : 0/0
  2118 ;;		On exit  : 0/0
  2119 ;;		Unchanged: 0/0
  2120 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2121 ;;      Params:         3       0       0       0       0       0       0       0       0
  2122 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2123 ;;      Temps:          2       0       0       0       0       0       0       0       0
  2124 ;;      Totals:         6       0       0       0       0       0       0       0       0
  2125 ;;Total ram usage:        6 bytes
  2126 ;; Hardware stack levels used:    1
  2127 ;; Hardware stack levels required when called:    5
  2128 ;; This function calls:
  2129 ;;		_transmitir
  2130 ;; This function is called by:
  2131 ;;		_demo_shield2_1
  2132 ;; This function uses a non-reentrant model
  2133 ;;
  2134                           
  2135                           	psect	text12
  2136  0077F4                     __ptext12:
  2137                           	opt stack 0
  2138  0077F4                     _informar:
  2139                           	opt stack 24
  2140                           
  2141                           ;Tecnica1.c: 114: char i=0;
  2142                           
  2143                           ;incstack = 0
  2144  0077F4  0E00               	movlw	0
  2145  0077F6  6E3B               	movwf	informar@i,c
  2146                           
  2147                           ;Tecnica1.c: 115: for(i=0;i<longitud;i++) transmitir(*(dato+i));
  2148  0077F8  0E00               	movlw	0
  2149  0077FA  6E3B               	movwf	informar@i,c
  2150  0077FC  D013               	goto	l2433
  2151  0077FE                     l2429:
  2152  0077FE  503B               	movf	informar@i,w,c
  2153  007800  0D01               	mullw	1
  2154  007802  C036  F039         	movff	informar@dato,??_informar
  2155  007806  C037  F03A         	movff	informar@dato+1,??_informar+1
  2156  00780A  50F3               	movf	prodl,w,c
  2157  00780C  2639               	addwf	??_informar,f,c
  2158  00780E  50F4               	movf	prodh,w,c
  2159  007810  223A               	addwfc	??_informar+1,f,c
  2160  007812  C039  FFF6         	movff	??_informar,tblptrl
  2161  007816  C03A  FFF7         	movff	??_informar+1,tblptrh
  2162  00781A                     	if	0	;tblptru may be non-zero
  2163  00781A                     	endif
  2164  00781A                     	if	0	;tblptru may be non-zero
  2165  00781A                     	endif
  2166  00781A  0008               	tblrd		*
  2167  00781C  50F5               	movf	tablat,w,c
  2168  00781E  ECD2  F03A         	call	_transmitir
  2169  007822  2A3B               	incf	informar@i,f,c
  2170  007824                     l2433:
  2171  007824  5038               	movf	informar@longitud,w,c
  2172  007826  5C3B               	subwf	informar@i,w,c
  2173  007828  B0D8               	btfsc	status,0,c
  2174  00782A  0012               	return	
  2175  00782C  D7E8               	goto	l2429
  2176  00782E                     __end_of_informar:
  2177                           	opt stack 0
  2178                           tblptru	equ	0xFF8
  2179                           tblptrh	equ	0xFF7
  2180                           tblptrl	equ	0xFF6
  2181                           tablat	equ	0xFF5
  2182                           prodh	equ	0xFF4
  2183                           prodl	equ	0xFF3
  2184                           intcon	equ	0xFF2
  2185                           postinc0	equ	0xFEE
  2186                           wreg	equ	0xFE8
  2187                           postdec1	equ	0xFE5
  2188                           fsr1l	equ	0xFE1
  2189                           status	equ	0xFD8
  2190                           
  2191 ;; *************** function _transmitir *****************
  2192 ;; Defined at:
  2193 ;;		line 118 in file "Tecnica1.c"
  2194 ;; Parameters:    Size  Location     Type
  2195 ;;  Dato            1    wreg     unsigned char 
  2196 ;; Auto vars:     Size  Location     Type
  2197 ;;  Dato            1   16[COMRAM] unsigned char 
  2198 ;; Return value:  Size  Location     Type
  2199 ;;                  1    wreg      void 
  2200 ;; Registers used:
  2201 ;;		wreg
  2202 ;; Tracked objects:
  2203 ;;		On entry : 0/0
  2204 ;;		On exit  : 0/0
  2205 ;;		Unchanged: 0/0
  2206 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2207 ;;      Params:         0       0       0       0       0       0       0       0       0
  2208 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2209 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2210 ;;      Totals:         1       0       0       0       0       0       0       0       0
  2211 ;;Total ram usage:        1 bytes
  2212 ;; Hardware stack levels used:    1
  2213 ;; Hardware stack levels required when called:    4
  2214 ;; This function calls:
  2215 ;;		Nothing
  2216 ;; This function is called by:
  2217 ;;		_informar
  2218 ;;		_demo_shield2_1
  2219 ;; This function uses a non-reentrant model
  2220 ;;
  2221                           
  2222                           	psect	text13
  2223  0075A4                     __ptext13:
  2224                           	opt stack 0
  2225  0075A4                     _transmitir:
  2226                           	opt stack 25
  2227                           
  2228                           ;incstack = 0
  2229                           ;transmitir@Dato stored from wreg
  2230  0075A4  6E35               	movwf	transmitir@Dato,c
  2231                           
  2232                           ;Tecnica1.c: 119: TXSTAbits.TXEN=1;
  2233  0075A6  8AAC               	bsf	4012,5,c	;volatile
  2234                           
  2235                           ;Tecnica1.c: 121: TXREG = Dato;
  2236  0075A8  C035  FFAD         	movff	transmitir@Dato,4013	;volatile
  2237  0075AC                     l398:
  2238  0075AC  A2AC               	btfss	4012,1,c	;volatile
  2239  0075AE  D7FE               	goto	l398
  2240                           
  2241                           ;Tecnica1.c: 123: TXSTAbits.TXEN=0;
  2242  0075B0  9AAC               	bcf	4012,5,c	;volatile
  2243  0075B2  0012               	return		;funcret
  2244  0075B4                     __end_of_transmitir:
  2245                           	opt stack 0
  2246                           tblptru	equ	0xFF8
  2247                           tblptrh	equ	0xFF7
  2248                           tblptrl	equ	0xFF6
  2249                           tablat	equ	0xFF5
  2250                           prodh	equ	0xFF4
  2251                           prodl	equ	0xFF3
  2252                           intcon	equ	0xFF2
  2253                           postinc0	equ	0xFEE
  2254                           wreg	equ	0xFE8
  2255                           postdec1	equ	0xFE5
  2256                           fsr1l	equ	0xFE1
  2257                           status	equ	0xFD8
  2258                           
  2259 ;; *************** function _clear_LCD *****************
  2260 ;; Defined at:
  2261 ;;		line 44 in file "lcd.c"
  2262 ;; Parameters:    Size  Location     Type
  2263 ;;		None
  2264 ;; Auto vars:     Size  Location     Type
  2265 ;;		None
  2266 ;; Return value:  Size  Location     Type
  2267 ;;                  1    wreg      void 
  2268 ;; Registers used:
  2269 ;;		wreg, status,2, status,0, cstack
  2270 ;; Tracked objects:
  2271 ;;		On entry : 0/0
  2272 ;;		On exit  : 0/0
  2273 ;;		Unchanged: 0/0
  2274 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2275 ;;      Params:         0       0       0       0       0       0       0       0       0
  2276 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2277 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2278 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2279 ;;Total ram usage:        0 bytes
  2280 ;; Hardware stack levels used:    1
  2281 ;; Hardware stack levels required when called:    6
  2282 ;; This function calls:
  2283 ;;		_read_BUSY
  2284 ;;		_write_CMD
  2285 ;; This function is called by:
  2286 ;;		_demo_shield2_1_INI
  2287 ;;		_demo_shield2_1
  2288 ;; This function uses a non-reentrant model
  2289 ;;
  2290                           
  2291                           	psect	text14
  2292  007552                     __ptext14:
  2293                           	opt stack 0
  2294  007552                     _clear_LCD:
  2295                           	opt stack 23
  2296                           
  2297                           ;lcd.c: 45: write_CMD(0x01);
  2298                           
  2299                           ;incstack = 0
  2300  007552  0E01               	movlw	1
  2301  007554  ECB5  F03A         	call	_write_CMD
  2302                           
  2303                           ;lcd.c: 46: read_BUSY();
  2304  007558  EC5B  F03B         	call	_read_BUSY	;wreg free
  2305  00755C  0012               	return		;funcret
  2306  00755E                     __end_of_clear_LCD:
  2307                           	opt stack 0
  2308                           tblptru	equ	0xFF8
  2309                           tblptrh	equ	0xFF7
  2310                           tblptrl	equ	0xFF6
  2311                           tablat	equ	0xFF5
  2312                           prodh	equ	0xFF4
  2313                           prodl	equ	0xFF3
  2314                           intcon	equ	0xFF2
  2315                           postinc0	equ	0xFEE
  2316                           wreg	equ	0xFE8
  2317                           postdec1	equ	0xFE5
  2318                           fsr1l	equ	0xFE1
  2319                           status	equ	0xFD8
  2320                           
  2321 ;; *************** function _char2LCD *****************
  2322 ;; Defined at:
  2323 ;;		line 37 in file "lcd.c"
  2324 ;; Parameters:    Size  Location     Type
  2325 ;;  dato            1    wreg     unsigned char 
  2326 ;; Auto vars:     Size  Location     Type
  2327 ;;  dato            1   18[COMRAM] unsigned char 
  2328 ;; Return value:  Size  Location     Type
  2329 ;;                  1    wreg      void 
  2330 ;; Registers used:
  2331 ;;		wreg, status,2, status,0, cstack
  2332 ;; Tracked objects:
  2333 ;;		On entry : 0/0
  2334 ;;		On exit  : 0/0
  2335 ;;		Unchanged: 0/0
  2336 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2337 ;;      Params:         0       0       0       0       0       0       0       0       0
  2338 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2339 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2340 ;;      Totals:         1       0       0       0       0       0       0       0       0
  2341 ;;Total ram usage:        1 bytes
  2342 ;; Hardware stack levels used:    1
  2343 ;; Hardware stack levels required when called:    6
  2344 ;; This function calls:
  2345 ;;		_read_BUSY
  2346 ;;		_write_DATA
  2347 ;; This function is called by:
  2348 ;;		_demo_shield2_1
  2349 ;; This function uses a non-reentrant model
  2350 ;;
  2351                           
  2352                           	psect	text15
  2353  007586                     __ptext15:
  2354                           	opt stack 0
  2355  007586                     _char2LCD:
  2356                           	opt stack 23
  2357                           
  2358                           ;incstack = 0
  2359                           ;char2LCD@dato stored from wreg
  2360  007586  6E37               	movwf	char2LCD@dato,c
  2361                           
  2362                           ;lcd.c: 39: write_DATA(dato);
  2363  007588  5037               	movf	char2LCD@dato,w,c
  2364  00758A  ECBC  F03A         	call	_write_DATA
  2365                           
  2366                           ;lcd.c: 40: read_BUSY();
  2367  00758E  EC5B  F03B         	call	_read_BUSY	;wreg free
  2368  007592  0012               	return		;funcret
  2369  007594                     __end_of_char2LCD:
  2370                           	opt stack 0
  2371                           tblptru	equ	0xFF8
  2372                           tblptrh	equ	0xFF7
  2373                           tblptrl	equ	0xFF6
  2374                           tablat	equ	0xFF5
  2375                           prodh	equ	0xFF4
  2376                           prodl	equ	0xFF3
  2377                           intcon	equ	0xFF2
  2378                           postinc0	equ	0xFEE
  2379                           wreg	equ	0xFE8
  2380                           postdec1	equ	0xFE5
  2381                           fsr1l	equ	0xFE1
  2382                           status	equ	0xFD8
  2383                           
  2384 ;; *************** function _write_DATA *****************
  2385 ;; Defined at:
  2386 ;;		line 101 in file "lcd.c"
  2387 ;; Parameters:    Size  Location     Type
  2388 ;;  dato            1    wreg     unsigned char 
  2389 ;; Auto vars:     Size  Location     Type
  2390 ;;  dato            1   17[COMRAM] unsigned char 
  2391 ;; Return value:  Size  Location     Type
  2392 ;;                  1    wreg      void 
  2393 ;; Registers used:
  2394 ;;		wreg, status,2, status,0, cstack
  2395 ;; Tracked objects:
  2396 ;;		On entry : 0/0
  2397 ;;		On exit  : 0/0
  2398 ;;		Unchanged: 0/0
  2399 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2400 ;;      Params:         0       0       0       0       0       0       0       0       0
  2401 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2402 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2403 ;;      Totals:         1       0       0       0       0       0       0       0       0
  2404 ;;Total ram usage:        1 bytes
  2405 ;; Hardware stack levels used:    1
  2406 ;; Hardware stack levels required when called:    5
  2407 ;; This function calls:
  2408 ;;		_write_LCD
  2409 ;; This function is called by:
  2410 ;;		_msg2LCD
  2411 ;;		_char2LCD
  2412 ;; This function uses a non-reentrant model
  2413 ;;
  2414                           
  2415                           	psect	text16
  2416  007578                     __ptext16:
  2417                           	opt stack 0
  2418  007578                     _write_DATA:
  2419                           	opt stack 23
  2420                           
  2421                           ;incstack = 0
  2422                           ;write_DATA@dato stored from wreg
  2423  007578  6E36               	movwf	write_DATA@dato,c
  2424                           
  2425                           ;lcd.c: 103: PORTEbits.RE2 = 0x1;
  2426  00757A  8484               	bsf	3972,2,c	;volatile
  2427                           
  2428                           ;lcd.c: 104: PORTEbits.RE1 = 0x0;
  2429  00757C  9284               	bcf	3972,1,c	;volatile
  2430                           
  2431                           ;lcd.c: 105: write_LCD(dato);
  2432  00757E  5036               	movf	write_DATA@dato,w,c
  2433  007580  EC18  F03B         	call	_write_LCD
  2434  007584  0012               	return		;funcret
  2435  007586                     __end_of_write_DATA:
  2436                           	opt stack 0
  2437                           tblptru	equ	0xFF8
  2438                           tblptrh	equ	0xFF7
  2439                           tblptrl	equ	0xFF6
  2440                           tablat	equ	0xFF5
  2441                           prodh	equ	0xFF4
  2442                           prodl	equ	0xFF3
  2443                           intcon	equ	0xFF2
  2444                           postinc0	equ	0xFEE
  2445                           wreg	equ	0xFE8
  2446                           postdec1	equ	0xFE5
  2447                           fsr1l	equ	0xFE1
  2448                           status	equ	0xFD8
  2449                           
  2450 ;; *************** function ___awmod *****************
  2451 ;; Defined at:
  2452 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awmod.c"
  2453 ;; Parameters:    Size  Location     Type
  2454 ;;  dividend        2   16[COMRAM] int 
  2455 ;;  divisor         2   18[COMRAM] int 
  2456 ;; Auto vars:     Size  Location     Type
  2457 ;;  sign            1   21[COMRAM] unsigned char 
  2458 ;;  counter         1   20[COMRAM] unsigned char 
  2459 ;; Return value:  Size  Location     Type
  2460 ;;                  2   16[COMRAM] int 
  2461 ;; Registers used:
  2462 ;;		wreg, status,2, status,0
  2463 ;; Tracked objects:
  2464 ;;		On entry : 0/0
  2465 ;;		On exit  : 0/0
  2466 ;;		Unchanged: 0/0
  2467 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2468 ;;      Params:         4       0       0       0       0       0       0       0       0
  2469 ;;      Locals:         2       0       0       0       0       0       0       0       0
  2470 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2471 ;;      Totals:         6       0       0       0       0       0       0       0       0
  2472 ;;Total ram usage:        6 bytes
  2473 ;; Hardware stack levels used:    1
  2474 ;; Hardware stack levels required when called:    4
  2475 ;; This function calls:
  2476 ;;		Nothing
  2477 ;; This function is called by:
  2478 ;;		_demo_shield2_1
  2479 ;; This function uses a non-reentrant model
  2480 ;;
  2481                           
  2482                           	psect	text17
  2483  007868                     __ptext17:
  2484                           	opt stack 0
  2485  007868                     ___awmod:
  2486                           	opt stack 25
  2487                           
  2488                           ;incstack = 0
  2489  007868  0E00               	movlw	0
  2490  00786A  6E3A               	movwf	___awmod@sign,c
  2491  00786C  AE36               	btfss	___awmod@dividend+1,7,c
  2492  00786E  D006               	goto	l2499
  2493  007870  6C35               	negf	___awmod@dividend,c
  2494  007872  1E36               	comf	___awmod@dividend+1,f,c
  2495  007874  B0D8               	btfsc	status,0,c
  2496  007876  2A36               	incf	___awmod@dividend+1,f,c
  2497  007878  0E01               	movlw	1
  2498  00787A  6E3A               	movwf	___awmod@sign,c
  2499  00787C                     l2499:
  2500  00787C  AE38               	btfss	___awmod@divisor+1,7,c
  2501  00787E  D004               	goto	l2503
  2502  007880  6C37               	negf	___awmod@divisor,c
  2503  007882  1E38               	comf	___awmod@divisor+1,f,c
  2504  007884  B0D8               	btfsc	status,0,c
  2505  007886  2A38               	incf	___awmod@divisor+1,f,c
  2506  007888                     l2503:
  2507  007888  5037               	movf	___awmod@divisor,w,c
  2508  00788A  1038               	iorwf	___awmod@divisor+1,w,c
  2509  00788C  B4D8               	btfsc	status,2,c
  2510  00788E  D018               	goto	l2519
  2511  007890  0E01               	movlw	1
  2512  007892  6E39               	movwf	___awmod@counter,c
  2513  007894  D004               	goto	l2509
  2514  007896                     l2507:
  2515  007896  90D8               	bcf	status,0,c
  2516  007898  3637               	rlcf	___awmod@divisor,f,c
  2517  00789A  3638               	rlcf	___awmod@divisor+1,f,c
  2518  00789C  2A39               	incf	___awmod@counter,f,c
  2519  00789E                     l2509:
  2520  00789E  AE38               	btfss	___awmod@divisor+1,7,c
  2521  0078A0  D7FA               	goto	l2507
  2522  0078A2                     l2511:
  2523  0078A2  5037               	movf	___awmod@divisor,w,c
  2524  0078A4  5C35               	subwf	___awmod@dividend,w,c
  2525  0078A6  5038               	movf	___awmod@divisor+1,w,c
  2526  0078A8  5836               	subwfb	___awmod@dividend+1,w,c
  2527  0078AA  A0D8               	btfss	status,0,c
  2528  0078AC  D004               	goto	l2515
  2529  0078AE  5037               	movf	___awmod@divisor,w,c
  2530  0078B0  5E35               	subwf	___awmod@dividend,f,c
  2531  0078B2  5038               	movf	___awmod@divisor+1,w,c
  2532  0078B4  5A36               	subwfb	___awmod@dividend+1,f,c
  2533  0078B6                     l2515:
  2534  0078B6  90D8               	bcf	status,0,c
  2535  0078B8  3238               	rrcf	___awmod@divisor+1,f,c
  2536  0078BA  3237               	rrcf	___awmod@divisor,f,c
  2537  0078BC  2E39               	decfsz	___awmod@counter,f,c
  2538  0078BE  D7F1               	goto	l2511
  2539  0078C0                     l2519:
  2540  0078C0  503A               	movf	___awmod@sign,w,c
  2541  0078C2  B4D8               	btfsc	status,2,c
  2542  0078C4  D004               	goto	l2523
  2543  0078C6  6C35               	negf	___awmod@dividend,c
  2544  0078C8  1E36               	comf	___awmod@dividend+1,f,c
  2545  0078CA  B0D8               	btfsc	status,0,c
  2546  0078CC  2A36               	incf	___awmod@dividend+1,f,c
  2547  0078CE                     l2523:
  2548  0078CE  C035  F035         	movff	___awmod@dividend,?___awmod
  2549  0078D2  C036  F036         	movff	___awmod@dividend+1,?___awmod+1
  2550  0078D6  0012               	return	
  2551  0078D8                     __end_of___awmod:
  2552                           	opt stack 0
  2553                           tblptru	equ	0xFF8
  2554                           tblptrh	equ	0xFF7
  2555                           tblptrl	equ	0xFF6
  2556                           tablat	equ	0xFF5
  2557                           prodh	equ	0xFF4
  2558                           prodl	equ	0xFF3
  2559                           intcon	equ	0xFF2
  2560                           postinc0	equ	0xFEE
  2561                           wreg	equ	0xFE8
  2562                           postdec1	equ	0xFE5
  2563                           fsr1l	equ	0xFE1
  2564                           status	equ	0xFD8
  2565                           
  2566 ;; *************** function ___awdiv *****************
  2567 ;; Defined at:
  2568 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awdiv.c"
  2569 ;; Parameters:    Size  Location     Type
  2570 ;;  dividend        2   22[COMRAM] int 
  2571 ;;  divisor         2   24[COMRAM] int 
  2572 ;; Auto vars:     Size  Location     Type
  2573 ;;  quotient        2   28[COMRAM] int 
  2574 ;;  sign            1   27[COMRAM] unsigned char 
  2575 ;;  counter         1   26[COMRAM] unsigned char 
  2576 ;; Return value:  Size  Location     Type
  2577 ;;                  2   22[COMRAM] int 
  2578 ;; Registers used:
  2579 ;;		wreg, status,2, status,0
  2580 ;; Tracked objects:
  2581 ;;		On entry : 0/0
  2582 ;;		On exit  : 0/0
  2583 ;;		Unchanged: 0/0
  2584 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2585 ;;      Params:         4       0       0       0       0       0       0       0       0
  2586 ;;      Locals:         4       0       0       0       0       0       0       0       0
  2587 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2588 ;;      Totals:         8       0       0       0       0       0       0       0       0
  2589 ;;Total ram usage:        8 bytes
  2590 ;; Hardware stack levels used:    1
  2591 ;; Hardware stack levels required when called:    4
  2592 ;; This function calls:
  2593 ;;		Nothing
  2594 ;; This function is called by:
  2595 ;;		_demo_shield2_1
  2596 ;; This function uses a non-reentrant model
  2597 ;;
  2598                           
  2599                           	psect	text18
  2600  0078D8                     __ptext18:
  2601                           	opt stack 0
  2602  0078D8                     ___awdiv:
  2603                           	opt stack 25
  2604                           
  2605                           ;incstack = 0
  2606  0078D8  0E00               	movlw	0
  2607  0078DA  6E40               	movwf	___awdiv@sign,c
  2608  0078DC  AE3E               	btfss	___awdiv@divisor+1,7,c
  2609  0078DE  D006               	goto	l2455
  2610  0078E0  6C3D               	negf	___awdiv@divisor,c
  2611  0078E2  1E3E               	comf	___awdiv@divisor+1,f,c
  2612  0078E4  B0D8               	btfsc	status,0,c
  2613  0078E6  2A3E               	incf	___awdiv@divisor+1,f,c
  2614  0078E8  0E01               	movlw	1
  2615  0078EA  6E40               	movwf	___awdiv@sign,c
  2616  0078EC                     l2455:
  2617  0078EC  AE3C               	btfss	___awdiv@dividend+1,7,c
  2618  0078EE  D006               	goto	l2461
  2619  0078F0  6C3B               	negf	___awdiv@dividend,c
  2620  0078F2  1E3C               	comf	___awdiv@dividend+1,f,c
  2621  0078F4  B0D8               	btfsc	status,0,c
  2622  0078F6  2A3C               	incf	___awdiv@dividend+1,f,c
  2623  0078F8  0E01               	movlw	1
  2624  0078FA  1A40               	xorwf	___awdiv@sign,f,c
  2625  0078FC                     l2461:
  2626  0078FC  0E00               	movlw	0
  2627  0078FE  6E42               	movwf	___awdiv@quotient+1,c
  2628  007900  0E00               	movlw	0
  2629  007902  6E41               	movwf	___awdiv@quotient,c
  2630  007904  503D               	movf	___awdiv@divisor,w,c
  2631  007906  103E               	iorwf	___awdiv@divisor+1,w,c
  2632  007908  B4D8               	btfsc	status,2,c
  2633  00790A  D01C               	goto	l2483
  2634  00790C  0E01               	movlw	1
  2635  00790E  6E3F               	movwf	___awdiv@counter,c
  2636  007910  D004               	goto	l2469
  2637  007912                     l2467:
  2638  007912  90D8               	bcf	status,0,c
  2639  007914  363D               	rlcf	___awdiv@divisor,f,c
  2640  007916  363E               	rlcf	___awdiv@divisor+1,f,c
  2641  007918  2A3F               	incf	___awdiv@counter,f,c
  2642  00791A                     l2469:
  2643  00791A  AE3E               	btfss	___awdiv@divisor+1,7,c
  2644  00791C  D7FA               	goto	l2467
  2645  00791E                     l2471:
  2646  00791E  90D8               	bcf	status,0,c
  2647  007920  3641               	rlcf	___awdiv@quotient,f,c
  2648  007922  3642               	rlcf	___awdiv@quotient+1,f,c
  2649  007924  503D               	movf	___awdiv@divisor,w,c
  2650  007926  5C3B               	subwf	___awdiv@dividend,w,c
  2651  007928  503E               	movf	___awdiv@divisor+1,w,c
  2652  00792A  583C               	subwfb	___awdiv@dividend+1,w,c
  2653  00792C  A0D8               	btfss	status,0,c
  2654  00792E  D005               	goto	l2479
  2655  007930  503D               	movf	___awdiv@divisor,w,c
  2656  007932  5E3B               	subwf	___awdiv@dividend,f,c
  2657  007934  503E               	movf	___awdiv@divisor+1,w,c
  2658  007936  5A3C               	subwfb	___awdiv@dividend+1,f,c
  2659  007938  8041               	bsf	___awdiv@quotient,0,c
  2660  00793A                     l2479:
  2661  00793A  90D8               	bcf	status,0,c
  2662  00793C  323E               	rrcf	___awdiv@divisor+1,f,c
  2663  00793E  323D               	rrcf	___awdiv@divisor,f,c
  2664  007940  2E3F               	decfsz	___awdiv@counter,f,c
  2665  007942  D7ED               	goto	l2471
  2666  007944                     l2483:
  2667  007944  5040               	movf	___awdiv@sign,w,c
  2668  007946  B4D8               	btfsc	status,2,c
  2669  007948  D004               	goto	l2487
  2670  00794A  6C41               	negf	___awdiv@quotient,c
  2671  00794C  1E42               	comf	___awdiv@quotient+1,f,c
  2672  00794E  B0D8               	btfsc	status,0,c
  2673  007950  2A42               	incf	___awdiv@quotient+1,f,c
  2674  007952                     l2487:
  2675  007952  C041  F03B         	movff	___awdiv@quotient,?___awdiv
  2676  007956  C042  F03C         	movff	___awdiv@quotient+1,?___awdiv+1
  2677  00795A  0012               	return	
  2678  00795C                     __end_of___awdiv:
  2679                           	opt stack 0
  2680                           tblptru	equ	0xFF8
  2681                           tblptrh	equ	0xFF7
  2682                           tblptrl	equ	0xFF6
  2683                           tablat	equ	0xFF5
  2684                           prodh	equ	0xFF4
  2685                           prodl	equ	0xFF3
  2686                           intcon	equ	0xFF2
  2687                           postinc0	equ	0xFEE
  2688                           wreg	equ	0xFE8
  2689                           postdec1	equ	0xFE5
  2690                           fsr1l	equ	0xFE1
  2691                           status	equ	0xFD8
  2692                           
  2693 ;; *************** function _DisminuirPeriodo *****************
  2694 ;; Defined at:
  2695 ;;		line 155 in file "Tecnica1.c"
  2696 ;; Parameters:    Size  Location     Type
  2697 ;;  valor           1    wreg     unsigned char 
  2698 ;; Auto vars:     Size  Location     Type
  2699 ;;  valor           1    6[BANK0 ] unsigned char 
  2700 ;; Return value:  Size  Location     Type
  2701 ;;                  1    wreg      void 
  2702 ;; Registers used:
  2703 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  2704 ;; Tracked objects:
  2705 ;;		On entry : 0/0
  2706 ;;		On exit  : 0/0
  2707 ;;		Unchanged: 0/0
  2708 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2709 ;;      Params:         0       0       0       0       0       0       0       0       0
  2710 ;;      Locals:         0       1       0       0       0       0       0       0       0
  2711 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2712 ;;      Totals:         0       1       0       0       0       0       0       0       0
  2713 ;;Total ram usage:        1 bytes
  2714 ;; Hardware stack levels used:    1
  2715 ;; Hardware stack levels required when called:    6
  2716 ;; This function calls:
  2717 ;;		_CalculoDeFrecuencia
  2718 ;; This function is called by:
  2719 ;;		_demo_shield2_1
  2720 ;; This function uses a non-reentrant model
  2721 ;;
  2722                           
  2723                           	psect	text19
  2724  007650                     __ptext19:
  2725                           	opt stack 0
  2726  007650                     _DisminuirPeriodo:
  2727                           	opt stack 23
  2728                           
  2729                           ;incstack = 0
  2730                           ;DisminuirPeriodo@valor stored from wreg
  2731  007650  0100               	movlb	0	; () banked
  2732  007652  6F66               	movwf	DisminuirPeriodo@valor& (0+255),b
  2733                           
  2734                           ;Tecnica1.c: 156: if(frecuencia<1000){
  2735  007654  0EE8               	movlw	232
  2736  007656  5C4D               	subwf	_frecuencia,w,c
  2737  007658  0E03               	movlw	3
  2738  00765A  584E               	subwfb	_frecuencia+1,w,c
  2739  00765C  B0D8               	btfsc	status,0,c
  2740  00765E  0012               	return	
  2741                           
  2742                           ;Tecnica1.c: 157: frecuencia+=valor;
  2743  007660  0100               	movlb	0	; () banked
  2744  007662  5166               	movf	DisminuirPeriodo@valor& (0+255),w,b
  2745  007664  264D               	addwf	_frecuencia,f,c
  2746  007666  0E00               	movlw	0
  2747  007668  224E               	addwfc	_frecuencia+1,f,c
  2748                           
  2749                           ; BSR set to: 0
  2750                           ;Tecnica1.c: 158: CalculoDeFrecuencia();
  2751  00766A  ECCD  F03E         	call	_CalculoDeFrecuencia	;wreg free
  2752  00766E  0012               	return	
  2753  007670                     __end_of_DisminuirPeriodo:
  2754                           	opt stack 0
  2755                           tblptru	equ	0xFF8
  2756                           tblptrh	equ	0xFF7
  2757                           tblptrl	equ	0xFF6
  2758                           tablat	equ	0xFF5
  2759                           prodh	equ	0xFF4
  2760                           prodl	equ	0xFF3
  2761                           intcon	equ	0xFF2
  2762                           postinc0	equ	0xFEE
  2763                           wreg	equ	0xFE8
  2764                           postdec1	equ	0xFE5
  2765                           fsr1l	equ	0xFE1
  2766                           status	equ	0xFD8
  2767                           
  2768 ;; *************** function _DesplazarIzquierda *****************
  2769 ;; Defined at:
  2770 ;;		line 61 in file "lcd.c"
  2771 ;; Parameters:    Size  Location     Type
  2772 ;;		None
  2773 ;; Auto vars:     Size  Location     Type
  2774 ;;		None
  2775 ;; Return value:  Size  Location     Type
  2776 ;;                  1    wreg      void 
  2777 ;; Registers used:
  2778 ;;		wreg, status,2, status,0, cstack
  2779 ;; Tracked objects:
  2780 ;;		On entry : 0/0
  2781 ;;		On exit  : 0/0
  2782 ;;		Unchanged: 0/0
  2783 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2784 ;;      Params:         0       0       0       0       0       0       0       0       0
  2785 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2786 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2787 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2788 ;;Total ram usage:        0 bytes
  2789 ;; Hardware stack levels used:    1
  2790 ;; Hardware stack levels required when called:    6
  2791 ;; This function calls:
  2792 ;;		_read_BUSY
  2793 ;;		_write_CMD
  2794 ;; This function is called by:
  2795 ;;		_demo_shield2_1
  2796 ;; This function uses a non-reentrant model
  2797 ;;
  2798                           
  2799                           	psect	text20
  2800  007546                     __ptext20:
  2801                           	opt stack 0
  2802  007546                     _DesplazarIzquierda:
  2803                           	opt stack 23
  2804                           
  2805                           ;lcd.c: 62: write_CMD(24);
  2806                           
  2807                           ;incstack = 0
  2808  007546  0E18               	movlw	24
  2809  007548  ECB5  F03A         	call	_write_CMD
  2810                           
  2811                           ;lcd.c: 63: read_BUSY();
  2812  00754C  EC5B  F03B         	call	_read_BUSY	;wreg free
  2813  007550  0012               	return		;funcret
  2814  007552                     __end_of_DesplazarIzquierda:
  2815                           	opt stack 0
  2816                           tblptru	equ	0xFF8
  2817                           tblptrh	equ	0xFF7
  2818                           tblptrl	equ	0xFF6
  2819                           tablat	equ	0xFF5
  2820                           prodh	equ	0xFF4
  2821                           prodl	equ	0xFF3
  2822                           intcon	equ	0xFF2
  2823                           postinc0	equ	0xFEE
  2824                           wreg	equ	0xFE8
  2825                           postdec1	equ	0xFE5
  2826                           fsr1l	equ	0xFE1
  2827                           status	equ	0xFD8
  2828                           
  2829 ;; *************** function _write_CMD *****************
  2830 ;; Defined at:
  2831 ;;		line 110 in file "lcd.c"
  2832 ;; Parameters:    Size  Location     Type
  2833 ;;  dato            1    wreg     unsigned char 
  2834 ;; Auto vars:     Size  Location     Type
  2835 ;;  dato            1   17[COMRAM] unsigned char 
  2836 ;; Return value:  Size  Location     Type
  2837 ;;                  1    wreg      void 
  2838 ;; Registers used:
  2839 ;;		wreg, status,2, status,0, cstack
  2840 ;; Tracked objects:
  2841 ;;		On entry : 0/0
  2842 ;;		On exit  : 0/0
  2843 ;;		Unchanged: 0/0
  2844 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2845 ;;      Params:         0       0       0       0       0       0       0       0       0
  2846 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2847 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2848 ;;      Totals:         1       0       0       0       0       0       0       0       0
  2849 ;;Total ram usage:        1 bytes
  2850 ;; Hardware stack levels used:    1
  2851 ;; Hardware stack levels required when called:    5
  2852 ;; This function calls:
  2853 ;;		_write_LCD
  2854 ;; This function is called by:
  2855 ;;		_clear_LCD
  2856 ;;		_ret_HOME
  2857 ;;		_set_CURSOR
  2858 ;;		_DesplazarIzquierda
  2859 ;;		_LCD_init
  2860 ;; This function uses a non-reentrant model
  2861 ;;
  2862                           
  2863                           	psect	text21
  2864  00756A                     __ptext21:
  2865                           	opt stack 0
  2866  00756A                     _write_CMD:
  2867                           	opt stack 23
  2868                           
  2869                           ;incstack = 0
  2870                           ;write_CMD@dato stored from wreg
  2871  00756A  6E36               	movwf	write_CMD@dato,c
  2872                           
  2873                           ;lcd.c: 112: PORTEbits.RE2 = 0x0;
  2874  00756C  9484               	bcf	3972,2,c	;volatile
  2875                           
  2876                           ;lcd.c: 113: PORTEbits.RE1 = 0x0;
  2877  00756E  9284               	bcf	3972,1,c	;volatile
  2878                           
  2879                           ;lcd.c: 114: write_LCD(dato);
  2880  007570  5036               	movf	write_CMD@dato,w,c
  2881  007572  EC18  F03B         	call	_write_LCD
  2882  007576  0012               	return		;funcret
  2883  007578                     __end_of_write_CMD:
  2884                           	opt stack 0
  2885                           tblptru	equ	0xFF8
  2886                           tblptrh	equ	0xFF7
  2887                           tblptrl	equ	0xFF6
  2888                           tablat	equ	0xFF5
  2889                           prodh	equ	0xFF4
  2890                           prodl	equ	0xFF3
  2891                           intcon	equ	0xFF2
  2892                           postinc0	equ	0xFEE
  2893                           wreg	equ	0xFE8
  2894                           postdec1	equ	0xFE5
  2895                           fsr1l	equ	0xFE1
  2896                           status	equ	0xFD8
  2897                           
  2898 ;; *************** function _write_LCD *****************
  2899 ;; Defined at:
  2900 ;;		line 119 in file "lcd.c"
  2901 ;; Parameters:    Size  Location     Type
  2902 ;;  dato            1    wreg     unsigned char 
  2903 ;; Auto vars:     Size  Location     Type
  2904 ;;  dato            1   16[COMRAM] unsigned char 
  2905 ;; Return value:  Size  Location     Type
  2906 ;;                  1    wreg      void 
  2907 ;; Registers used:
  2908 ;;		wreg, status,2, status,0
  2909 ;; Tracked objects:
  2910 ;;		On entry : 0/0
  2911 ;;		On exit  : 0/0
  2912 ;;		Unchanged: 0/0
  2913 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2914 ;;      Params:         0       0       0       0       0       0       0       0       0
  2915 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2916 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2917 ;;      Totals:         1       0       0       0       0       0       0       0       0
  2918 ;;Total ram usage:        1 bytes
  2919 ;; Hardware stack levels used:    1
  2920 ;; Hardware stack levels required when called:    4
  2921 ;; This function calls:
  2922 ;;		Nothing
  2923 ;; This function is called by:
  2924 ;;		_write_DATA
  2925 ;;		_write_CMD
  2926 ;; This function uses a non-reentrant model
  2927 ;;
  2928                           
  2929                           	psect	text22
  2930  007630                     __ptext22:
  2931                           	opt stack 0
  2932  007630                     _write_LCD:
  2933                           	opt stack 23
  2934                           
  2935                           ;incstack = 0
  2936                           ;write_LCD@dato stored from wreg
  2937  007630  6E35               	movwf	write_LCD@dato,c
  2938                           
  2939                           ;lcd.c: 121: LATD &= 0x0F;
  2940  007632  0E0F               	movlw	15
  2941  007634  168C               	andwf	3980,f,c	;volatile
  2942                           
  2943                           ;lcd.c: 122: PORTEbits.RE0 = 0x1;
  2944  007636  8084               	bsf	3972,0,c	;volatile
  2945                           
  2946                           ;lcd.c: 125: LATD |= (dato & 0xF0);
  2947  007638  5035               	movf	write_LCD@dato,w,c
  2948  00763A  0BF0               	andlw	240
  2949  00763C  128C               	iorwf	3980,f,c	;volatile
  2950                           
  2951                           ;lcd.c: 127: PORTEbits.RE0 = 0x0;
  2952  00763E  9084               	bcf	3972,0,c	;volatile
  2953                           
  2954                           ;lcd.c: 129: LATD &= 0x0F;
  2955  007640  0E0F               	movlw	15
  2956  007642  168C               	andwf	3980,f,c	;volatile
  2957                           
  2958                           ;lcd.c: 130: PORTEbits.RE0 = 0x1;
  2959  007644  8084               	bsf	3972,0,c	;volatile
  2960                           
  2961                           ;lcd.c: 133: LATD |= (dato<<4);
  2962  007646  3835               	swapf	write_LCD@dato,w,c
  2963  007648  0BF0               	andlw	240
  2964  00764A  128C               	iorwf	3980,f,c	;volatile
  2965                           
  2966                           ;lcd.c: 135: PORTEbits.RE0 = 0x0;
  2967  00764C  9084               	bcf	3972,0,c	;volatile
  2968  00764E  0012               	return		;funcret
  2969  007650                     __end_of_write_LCD:
  2970                           	opt stack 0
  2971                           tblptru	equ	0xFF8
  2972                           tblptrh	equ	0xFF7
  2973                           tblptrl	equ	0xFF6
  2974                           tablat	equ	0xFF5
  2975                           prodh	equ	0xFF4
  2976                           prodl	equ	0xFF3
  2977                           intcon	equ	0xFF2
  2978                           postinc0	equ	0xFEE
  2979                           wreg	equ	0xFE8
  2980                           postdec1	equ	0xFE5
  2981                           fsr1l	equ	0xFE1
  2982                           status	equ	0xFD8
  2983                           
  2984 ;; *************** function _read_BUSY *****************
  2985 ;; Defined at:
  2986 ;;		line 140 in file "lcd.c"
  2987 ;; Parameters:    Size  Location     Type
  2988 ;;		None
  2989 ;; Auto vars:     Size  Location     Type
  2990 ;;  aux             1   16[COMRAM] unsigned char 
  2991 ;; Return value:  Size  Location     Type
  2992 ;;                  1    wreg      void 
  2993 ;; Registers used:
  2994 ;;		wreg, status,2, status,0
  2995 ;; Tracked objects:
  2996 ;;		On entry : 0/0
  2997 ;;		On exit  : 0/0
  2998 ;;		Unchanged: 0/0
  2999 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3000 ;;      Params:         0       0       0       0       0       0       0       0       0
  3001 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3002 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3003 ;;      Totals:         1       0       0       0       0       0       0       0       0
  3004 ;;Total ram usage:        1 bytes
  3005 ;; Hardware stack levels used:    1
  3006 ;; Hardware stack levels required when called:    4
  3007 ;; This function calls:
  3008 ;;		Nothing
  3009 ;; This function is called by:
  3010 ;;		_msg2LCD
  3011 ;;		_char2LCD
  3012 ;;		_clear_LCD
  3013 ;;		_ret_HOME
  3014 ;;		_set_CURSOR
  3015 ;;		_DesplazarIzquierda
  3016 ;;		_LCD_init
  3017 ;; This function uses a non-reentrant model
  3018 ;;
  3019                           
  3020                           	psect	text23
  3021  0076B6                     __ptext23:
  3022                           	opt stack 0
  3023  0076B6                     _read_BUSY:
  3024                           	opt stack 24
  3025                           
  3026                           ;lcd.c: 141: unsigned char aux;
  3027                           ;lcd.c: 143: TRISD |= 0xF0;
  3028                           
  3029                           ;incstack = 0
  3030  0076B6  0EF0               	movlw	240
  3031  0076B8  1295               	iorwf	3989,f,c	;volatile
  3032                           
  3033                           ;lcd.c: 144: PORTEbits.RE2 = 0x0;
  3034  0076BA  9484               	bcf	3972,2,c	;volatile
  3035                           
  3036                           ;lcd.c: 145: PORTEbits.RE1 = 0x1;
  3037  0076BC  8284               	bsf	3972,1,c	;volatile
  3038  0076BE                     l1343:
  3039                           
  3040                           ;lcd.c: 147: PORTEbits.RE0 = 0x1;
  3041  0076BE  8084               	bsf	3972,0,c	;volatile
  3042                           
  3043                           ;lcd.c: 148: aux = PORTDbits.RD7;
  3044  0076C0  0E00               	movlw	0
  3045  0076C2  BE83               	btfsc	3971,7,c	;volatile
  3046  0076C4  0E01               	movlw	1
  3047  0076C6  6E35               	movwf	read_BUSY@aux,c
  3048                           
  3049                           ;lcd.c: 149: PORTEbits.RE0 = 0x0;
  3050  0076C8  9084               	bcf	3972,0,c	;volatile
  3051                           
  3052                           ;lcd.c: 150: PORTEbits.RE0 = 0x1;
  3053  0076CA  8084               	bsf	3972,0,c	;volatile
  3054                           
  3055                           ;lcd.c: 151: (void)PORTDbits.RD7;
  3056  0076CC  5083               	movf	3971,w,c	;volatile
  3057                           
  3058                           ;lcd.c: 152: PORTEbits.RE0 = 0x0;
  3059  0076CE  9084               	bcf	3972,0,c	;volatile
  3060                           
  3061                           ;lcd.c: 153: }while (aux);
  3062  0076D0  5035               	movf	read_BUSY@aux,w,c
  3063  0076D2  A4D8               	btfss	status,2,c
  3064  0076D4  D7F4               	goto	l1343
  3065                           
  3066                           ;lcd.c: 154: PORTEbits.RE1 = 0x0;
  3067  0076D6  9284               	bcf	3972,1,c	;volatile
  3068                           
  3069                           ;lcd.c: 155: TRISD &= 0x0F;
  3070  0076D8  0E0F               	movlw	15
  3071  0076DA  1695               	andwf	3989,f,c	;volatile
  3072  0076DC  0012               	return		;funcret
  3073  0076DE                     __end_of_read_BUSY:
  3074                           	opt stack 0
  3075                           tblptru	equ	0xFF8
  3076                           tblptrh	equ	0xFF7
  3077                           tblptrl	equ	0xFF6
  3078                           tablat	equ	0xFF5
  3079                           prodh	equ	0xFF4
  3080                           prodl	equ	0xFF3
  3081                           intcon	equ	0xFF2
  3082                           postinc0	equ	0xFEE
  3083                           wreg	equ	0xFE8
  3084                           postdec1	equ	0xFE5
  3085                           fsr1l	equ	0xFE1
  3086                           status	equ	0xFD8
  3087                           
  3088 ;; *************** function _AumentarPeriodo *****************
  3089 ;; Defined at:
  3090 ;;		line 149 in file "Tecnica1.c"
  3091 ;; Parameters:    Size  Location     Type
  3092 ;;  valor           1    wreg     unsigned char 
  3093 ;; Auto vars:     Size  Location     Type
  3094 ;;  valor           1    6[BANK0 ] unsigned char 
  3095 ;; Return value:  Size  Location     Type
  3096 ;;                  1    wreg      void 
  3097 ;; Registers used:
  3098 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  3099 ;; Tracked objects:
  3100 ;;		On entry : 0/0
  3101 ;;		On exit  : 0/0
  3102 ;;		Unchanged: 0/0
  3103 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3104 ;;      Params:         0       0       0       0       0       0       0       0       0
  3105 ;;      Locals:         0       1       0       0       0       0       0       0       0
  3106 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3107 ;;      Totals:         0       1       0       0       0       0       0       0       0
  3108 ;;Total ram usage:        1 bytes
  3109 ;; Hardware stack levels used:    1
  3110 ;; Hardware stack levels required when called:    6
  3111 ;; This function calls:
  3112 ;;		_CalculoDeFrecuencia
  3113 ;; This function is called by:
  3114 ;;		_demo_shield2_1
  3115 ;; This function uses a non-reentrant model
  3116 ;;
  3117                           
  3118                           	psect	text24
  3119  007610                     __ptext24:
  3120                           	opt stack 0
  3121  007610                     _AumentarPeriodo:
  3122                           	opt stack 23
  3123                           
  3124                           ;incstack = 0
  3125                           ;AumentarPeriodo@valor stored from wreg
  3126  007610  0100               	movlb	0	; () banked
  3127  007612  6F66               	movwf	AumentarPeriodo@valor& (0+255),b
  3128                           
  3129                           ;Tecnica1.c: 150: if(frecuencia>1){
  3130  007614  504E               	movf	_frecuencia+1,w,c
  3131  007616  E104               	bnz	u2200
  3132  007618  0E02               	movlw	2
  3133  00761A  5C4D               	subwf	_frecuencia,w,c
  3134  00761C  A0D8               	btfss	status,0,c
  3135  00761E  0012               	return	
  3136  007620                     u2200:
  3137                           
  3138                           ;Tecnica1.c: 151: frecuencia-=valor;
  3139  007620  0100               	movlb	0	; () banked
  3140  007622  5166               	movf	AumentarPeriodo@valor& (0+255),w,b
  3141  007624  5E4D               	subwf	_frecuencia,f,c
  3142  007626  0E00               	movlw	0
  3143  007628  5A4E               	subwfb	_frecuencia+1,f,c
  3144                           
  3145                           ; BSR set to: 0
  3146                           ;Tecnica1.c: 152: CalculoDeFrecuencia();
  3147  00762A  ECCD  F03E         	call	_CalculoDeFrecuencia	;wreg free
  3148  00762E  0012               	return	
  3149  007630                     __end_of_AumentarPeriodo:
  3150                           	opt stack 0
  3151                           tblptru	equ	0xFF8
  3152                           tblptrh	equ	0xFF7
  3153                           tblptrl	equ	0xFF6
  3154                           tablat	equ	0xFF5
  3155                           prodh	equ	0xFF4
  3156                           prodl	equ	0xFF3
  3157                           intcon	equ	0xFF2
  3158                           postinc0	equ	0xFEE
  3159                           wreg	equ	0xFE8
  3160                           postdec1	equ	0xFE5
  3161                           fsr1l	equ	0xFE1
  3162                           status	equ	0xFD8
  3163                           
  3164 ;; *************** function _CalculoDeFrecuencia *****************
  3165 ;; Defined at:
  3166 ;;		line 161 in file "Tecnica1.c"
  3167 ;; Parameters:    Size  Location     Type
  3168 ;;		None
  3169 ;; Auto vars:     Size  Location     Type
  3170 ;;		None
  3171 ;; Return value:  Size  Location     Type
  3172 ;;                  1    wreg      void 
  3173 ;; Registers used:
  3174 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  3175 ;; Tracked objects:
  3176 ;;		On entry : 0/0
  3177 ;;		On exit  : 0/0
  3178 ;;		Unchanged: 0/0
  3179 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3180 ;;      Params:         0       0       0       0       0       0       0       0       0
  3181 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3182 ;;      Temps:          0       2       0       0       0       0       0       0       0
  3183 ;;      Totals:         0       2       0       0       0       0       0       0       0
  3184 ;;Total ram usage:        2 bytes
  3185 ;; Hardware stack levels used:    1
  3186 ;; Hardware stack levels required when called:    5
  3187 ;; This function calls:
  3188 ;;		___aldiv
  3189 ;;		___wmul
  3190 ;; This function is called by:
  3191 ;;		_AumentarPeriodo
  3192 ;;		_DisminuirPeriodo
  3193 ;;		_demo_shield2_1_INI
  3194 ;; This function uses a non-reentrant model
  3195 ;;
  3196                           
  3197                           	psect	text25
  3198  007D9A                     __ptext25:
  3199                           	opt stack 0
  3200  007D9A                     _CalculoDeFrecuencia:
  3201                           	opt stack 24
  3202                           
  3203                           ;Tecnica1.c: 162: if(frecuencia>100){
  3204                           
  3205                           ;incstack = 0
  3206  007D9A  504E               	movf	_frecuencia+1,w,c
  3207  007D9C  E104               	bnz	u2120
  3208  007D9E  0E65               	movlw	101
  3209  007DA0  5C4D               	subwf	_frecuencia,w,c
  3210  007DA2  A0D8               	btfss	status,0,c
  3211  007DA4  D031               	goto	l2775
  3212  007DA6                     u2120:
  3213                           
  3214                           ;Tecnica1.c: 163: MultiplicadorSet = 0;
  3215  007DA6  0E00               	movlw	0
  3216  007DA8  6E0D               	movwf	_MultiplicadorSet,c
  3217                           
  3218                           ;Tecnica1.c: 164: MedioPeriodoSet=(2000000/frecuencia);
  3219  007DAA  0E80               	movlw	128
  3220  007DAC  6E35               	movwf	___aldiv@dividend,c
  3221  007DAE  0E84               	movlw	132
  3222  007DB0  6E36               	movwf	___aldiv@dividend+1,c
  3223  007DB2  0E1E               	movlw	30
  3224  007DB4  6E37               	movwf	___aldiv@dividend+2,c
  3225  007DB6  0E00               	movlw	0
  3226  007DB8  6E38               	movwf	___aldiv@dividend+3,c
  3227  007DBA  C04D  F039         	movff	_frecuencia,___aldiv@divisor
  3228  007DBE  C04E  F03A         	movff	_frecuencia+1,___aldiv@divisor+1
  3229  007DC2  6A3B               	clrf	___aldiv@divisor+2,c
  3230  007DC4  6A3C               	clrf	___aldiv@divisor+3,c
  3231  007DC6  EC38  F03D         	call	___aldiv	;wreg free
  3232  007DCA  C035  F003         	movff	?___aldiv,_MedioPeriodoSet
  3233  007DCE  C036  F004         	movff	?___aldiv+1,_MedioPeriodoSet+1
  3234                           
  3235                           ;Tecnica1.c: 165: MedioPeriodoSet = (MedioPeriodoSet-OffsetPeriodo)*3;
  3236  007DD2  5047               	movf	_OffsetPeriodo,w,c
  3237  007DD4  0100               	movlb	0	; () banked
  3238  007DD6  6F64               	movwf	??_CalculoDeFrecuencia& (0+255),b
  3239  007DD8  6B65               	clrf	(??_CalculoDeFrecuencia+1)& (0+255),b
  3240  007DDA  0100               	movlb	0	; () banked
  3241  007DDC  1F64               	comf	??_CalculoDeFrecuencia& (0+255),f,b
  3242  007DDE  1F65               	comf	(??_CalculoDeFrecuencia+1)& (0+255),f,b
  3243  007DE0  4B64               	infsnz	??_CalculoDeFrecuencia& (0+255),f,b
  3244  007DE2  2B65               	incf	(??_CalculoDeFrecuencia+1)& (0+255),f,b
  3245  007DE4  5003               	movf	_MedioPeriodoSet,w,c
  3246  007DE6  0100               	movlb	0	; () banked
  3247  007DE8  2564               	addwf	??_CalculoDeFrecuencia& (0+255),w,b
  3248  007DEA  0100               	movlb	0	; () banked
  3249  007DEC  6F60               	movwf	___wmul@multiplier& (0+255),b
  3250  007DEE  5004               	movf	_MedioPeriodoSet+1,w,c
  3251  007DF0  0100               	movlb	0	; () banked
  3252  007DF2  2165               	addwfc	(??_CalculoDeFrecuencia+1)& (0+255),w,b
  3253  007DF4  0100               	movlb	0	; () banked
  3254  007DF6  6F61               	movwf	(___wmul@multiplier+1)& (0+255),b
  3255  007DF8  0E00               	movlw	0
  3256  007DFA  0100               	movlb	0	; () banked
  3257  007DFC  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  3258  007DFE  0E03               	movlw	3
  3259  007E00  6F62               	movwf	___wmul@multiplicand& (0+255),b
  3260  007E02  ECC7  F03B         	call	___wmul	;wreg free
  3261  007E06  D0B6               	goto	L3
  3262  007E08                     l2775:
  3263                           
  3264                           ;Tecnica1.c: 168: else if(frecuencia<=100 && frecuencia>60 ){
  3265  007E08  504E               	movf	_frecuencia+1,w,c
  3266  007E0A  E13F               	bnz	l2785
  3267  007E0C  0E65               	movlw	101
  3268  007E0E  5C4D               	subwf	_frecuencia,w,c
  3269  007E10  B0D8               	btfsc	status,0,c
  3270  007E12  D03B               	goto	l2785
  3271  007E14  504E               	movf	_frecuencia+1,w,c
  3272  007E16  E104               	bnz	u2140
  3273  007E18  0E3D               	movlw	61
  3274  007E1A  5C4D               	subwf	_frecuencia,w,c
  3275  007E1C  A0D8               	btfss	status,0,c
  3276  007E1E  D035               	goto	l2785
  3277  007E20                     u2140:
  3278                           
  3279                           ;Tecnica1.c: 169: MultiplicadorSet = 0;
  3280  007E20  0E00               	movlw	0
  3281  007E22  6E0D               	movwf	_MultiplicadorSet,c
  3282                           
  3283                           ;Tecnica1.c: 170: T1CONbits.T1CKPS = 1;
  3284  007E24  50CD               	movf	4045,w,c	;volatile
  3285  007E26  0BCF               	andlw	-49
  3286  007E28  0910               	iorlw	16
  3287  007E2A  6ECD               	movwf	4045,c	;volatile
  3288                           
  3289                           ;Tecnica1.c: 171: MedioPeriodoSet=(1000000/frecuencia);
  3290  007E2C  0E40               	movlw	64
  3291  007E2E  6E35               	movwf	___aldiv@dividend,c
  3292  007E30  0E42               	movlw	66
  3293  007E32  6E36               	movwf	___aldiv@dividend+1,c
  3294  007E34  0E0F               	movlw	15
  3295  007E36  6E37               	movwf	___aldiv@dividend+2,c
  3296  007E38  0E00               	movlw	0
  3297  007E3A  6E38               	movwf	___aldiv@dividend+3,c
  3298  007E3C  C04D  F039         	movff	_frecuencia,___aldiv@divisor
  3299  007E40  C04E  F03A         	movff	_frecuencia+1,___aldiv@divisor+1
  3300  007E44  6A3B               	clrf	___aldiv@divisor+2,c
  3301  007E46  6A3C               	clrf	___aldiv@divisor+3,c
  3302  007E48  EC38  F03D         	call	___aldiv	;wreg free
  3303  007E4C  C035  F003         	movff	?___aldiv,_MedioPeriodoSet
  3304  007E50  C036  F004         	movff	?___aldiv+1,_MedioPeriodoSet+1
  3305                           
  3306                           ;Tecnica1.c: 172: MedioPeriodoSet = (MedioPeriodoSet-OffsetPeriodo)*3;
  3307  007E54  5047               	movf	_OffsetPeriodo,w,c
  3308  007E56  0100               	movlb	0	; () banked
  3309  007E58  6F64               	movwf	??_CalculoDeFrecuencia& (0+255),b
  3310  007E5A  6B65               	clrf	(??_CalculoDeFrecuencia+1)& (0+255),b
  3311  007E5C  0100               	movlb	0	; () banked
  3312  007E5E  1F64               	comf	??_CalculoDeFrecuencia& (0+255),f,b
  3313  007E60  1F65               	comf	(??_CalculoDeFrecuencia+1)& (0+255),f,b
  3314  007E62  4B64               	infsnz	??_CalculoDeFrecuencia& (0+255),f,b
  3315  007E64  2B65               	incf	(??_CalculoDeFrecuencia+1)& (0+255),f,b
  3316  007E66  5003               	movf	_MedioPeriodoSet,w,c
  3317  007E68  0100               	movlb	0	; () banked
  3318  007E6A  2564               	addwf	??_CalculoDeFrecuencia& (0+255),w,b
  3319  007E6C  0100               	movlb	0	; () banked
  3320  007E6E  6F60               	movwf	___wmul@multiplier& (0+255),b
  3321  007E70  5004               	movf	_MedioPeriodoSet+1,w,c
  3322  007E72  0100               	movlb	0	; () banked
  3323  007E74  2165               	addwfc	(??_CalculoDeFrecuencia+1)& (0+255),w,b
  3324  007E76  0100               	movlb	0	; () banked
  3325  007E78  6F61               	movwf	(___wmul@multiplier+1)& (0+255),b
  3326  007E7A  0E00               	movlw	0
  3327  007E7C  0100               	movlb	0	; () banked
  3328  007E7E  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  3329  007E80  0E03               	movlw	3
  3330  007E82  6F62               	movwf	___wmul@multiplicand& (0+255),b
  3331  007E84  ECC7  F03B         	call	___wmul	;wreg free
  3332  007E88  D075               	goto	L3
  3333  007E8A                     l2785:
  3334                           
  3335                           ;Tecnica1.c: 175: else if(frecuencia<=60 && frecuencia > 30){
  3336  007E8A  504E               	movf	_frecuencia+1,w,c
  3337  007E8C  E139               	bnz	l2797
  3338  007E8E  0E3D               	movlw	61
  3339  007E90  5C4D               	subwf	_frecuencia,w,c
  3340  007E92  B0D8               	btfsc	status,0,c
  3341  007E94  D035               	goto	l2797
  3342  007E96  504E               	movf	_frecuencia+1,w,c
  3343  007E98  E104               	bnz	u2160
  3344  007E9A  0E1F               	movlw	31
  3345  007E9C  5C4D               	subwf	_frecuencia,w,c
  3346  007E9E  A0D8               	btfss	status,0,c
  3347  007EA0  D02F               	goto	l2797
  3348  007EA2                     u2160:
  3349                           
  3350                           ;Tecnica1.c: 176: MultiplicadorSet = 0;
  3351  007EA2  0E00               	movlw	0
  3352  007EA4  6E0D               	movwf	_MultiplicadorSet,c
  3353                           
  3354                           ;Tecnica1.c: 177: T1CONbits.T1CKPS0 = 0;
  3355  007EA6  98CD               	bcf	4045,4,c	;volatile
  3356                           
  3357                           ;Tecnica1.c: 178: T1CONbits.T1CKPS1 = 1;
  3358  007EA8  8ACD               	bsf	4045,5,c	;volatile
  3359                           
  3360                           ;Tecnica1.c: 179: MedioPeriodoSet=(500000/frecuencia-OffsetPeriodo)*3;
  3361  007EAA  5047               	movf	_OffsetPeriodo,w,c
  3362  007EAC  0100               	movlb	0	; () banked
  3363  007EAE  6F64               	movwf	??_CalculoDeFrecuencia& (0+255),b
  3364  007EB0  6B65               	clrf	(??_CalculoDeFrecuencia+1)& (0+255),b
  3365  007EB2  0100               	movlb	0	; () banked
  3366  007EB4  1F64               	comf	??_CalculoDeFrecuencia& (0+255),f,b
  3367  007EB6  1F65               	comf	(??_CalculoDeFrecuencia+1)& (0+255),f,b
  3368  007EB8  4B64               	infsnz	??_CalculoDeFrecuencia& (0+255),f,b
  3369  007EBA  2B65               	incf	(??_CalculoDeFrecuencia+1)& (0+255),f,b
  3370  007EBC  C04D  F039         	movff	_frecuencia,___aldiv@divisor
  3371  007EC0  C04E  F03A         	movff	_frecuencia+1,___aldiv@divisor+1
  3372  007EC4  6A3B               	clrf	___aldiv@divisor+2,c
  3373  007EC6  6A3C               	clrf	___aldiv@divisor+3,c
  3374  007EC8  0E20               	movlw	32
  3375  007ECA  6E35               	movwf	___aldiv@dividend,c
  3376  007ECC  0EA1               	movlw	161
  3377  007ECE  6E36               	movwf	___aldiv@dividend+1,c
  3378  007ED0  0E07               	movlw	7
  3379  007ED2  6E37               	movwf	___aldiv@dividend+2,c
  3380  007ED4  0E00               	movlw	0
  3381  007ED6  6E38               	movwf	___aldiv@dividend+3,c
  3382  007ED8  EC38  F03D         	call	___aldiv	;wreg free
  3383  007EDC  0100               	movlb	0	; () banked
  3384  007EDE  5164               	movf	??_CalculoDeFrecuencia& (0+255),w,b
  3385  007EE0  2435               	addwf	?___aldiv,w,c
  3386  007EE2  0100               	movlb	0	; () banked
  3387  007EE4  6F60               	movwf	___wmul@multiplier& (0+255),b
  3388  007EE6  0100               	movlb	0	; () banked
  3389  007EE8  5165               	movf	(??_CalculoDeFrecuencia+1)& (0+255),w,b
  3390  007EEA  2036               	addwfc	?___aldiv+1,w,c
  3391  007EEC  0100               	movlb	0	; () banked
  3392  007EEE  6F61               	movwf	(___wmul@multiplier+1)& (0+255),b
  3393  007EF0  0E00               	movlw	0
  3394  007EF2  0100               	movlb	0	; () banked
  3395  007EF4  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  3396  007EF6  0E03               	movlw	3
  3397  007EF8  6F62               	movwf	___wmul@multiplicand& (0+255),b
  3398  007EFA  ECC7  F03B         	call	___wmul	;wreg free
  3399  007EFE  D03A               	goto	L3
  3400  007F00                     l2797:
  3401                           
  3402                           ;Tecnica1.c: 182: else if(frecuencia<=30 && frecuencia > 20){
  3403  007F00  504E               	movf	_frecuencia+1,w,c
  3404  007F02  E13D               	bnz	l2809
  3405  007F04  0E1F               	movlw	31
  3406  007F06  5C4D               	subwf	_frecuencia,w,c
  3407  007F08  B0D8               	btfsc	status,0,c
  3408  007F0A  D039               	goto	l2809
  3409  007F0C  504E               	movf	_frecuencia+1,w,c
  3410  007F0E  E104               	bnz	u2180
  3411  007F10  0E15               	movlw	21
  3412  007F12  5C4D               	subwf	_frecuencia,w,c
  3413  007F14  A0D8               	btfss	status,0,c
  3414  007F16  D033               	goto	l2809
  3415  007F18                     u2180:
  3416                           
  3417                           ;Tecnica1.c: 183: MultiplicadorSet = 0;
  3418  007F18  0E00               	movlw	0
  3419  007F1A  6E0D               	movwf	_MultiplicadorSet,c
  3420                           
  3421                           ;Tecnica1.c: 184: T1CONbits.T1CKPS0 = 1;
  3422  007F1C  88CD               	bsf	4045,4,c	;volatile
  3423                           
  3424                           ;Tecnica1.c: 185: T1CONbits.T1CKPS1 = 1;
  3425  007F1E  8ACD               	bsf	4045,5,c	;volatile
  3426                           
  3427                           ;Tecnica1.c: 186: MedioPeriodoSet=(250000/frecuencia-OffsetPeriodo)*3;
  3428  007F20  5047               	movf	_OffsetPeriodo,w,c
  3429  007F22  0100               	movlb	0	; () banked
  3430  007F24  6F64               	movwf	??_CalculoDeFrecuencia& (0+255),b
  3431  007F26  6B65               	clrf	(??_CalculoDeFrecuencia+1)& (0+255),b
  3432  007F28  0100               	movlb	0	; () banked
  3433  007F2A  1F64               	comf	??_CalculoDeFrecuencia& (0+255),f,b
  3434  007F2C  1F65               	comf	(??_CalculoDeFrecuencia+1)& (0+255),f,b
  3435  007F2E  4B64               	infsnz	??_CalculoDeFrecuencia& (0+255),f,b
  3436  007F30  2B65               	incf	(??_CalculoDeFrecuencia+1)& (0+255),f,b
  3437  007F32  C04D  F039         	movff	_frecuencia,___aldiv@divisor
  3438  007F36  C04E  F03A         	movff	_frecuencia+1,___aldiv@divisor+1
  3439  007F3A  6A3B               	clrf	___aldiv@divisor+2,c
  3440  007F3C  6A3C               	clrf	___aldiv@divisor+3,c
  3441  007F3E  0E90               	movlw	144
  3442  007F40  6E35               	movwf	___aldiv@dividend,c
  3443  007F42  0ED0               	movlw	208
  3444  007F44  6E36               	movwf	___aldiv@dividend+1,c
  3445  007F46  0E03               	movlw	3
  3446  007F48  6E37               	movwf	___aldiv@dividend+2,c
  3447  007F4A  0E00               	movlw	0
  3448  007F4C  6E38               	movwf	___aldiv@dividend+3,c
  3449  007F4E  EC38  F03D         	call	___aldiv	;wreg free
  3450  007F52  0100               	movlb	0	; () banked
  3451  007F54  5164               	movf	??_CalculoDeFrecuencia& (0+255),w,b
  3452  007F56  2435               	addwf	?___aldiv,w,c
  3453  007F58  0100               	movlb	0	; () banked
  3454  007F5A  6F60               	movwf	___wmul@multiplier& (0+255),b
  3455  007F5C  0100               	movlb	0	; () banked
  3456  007F5E  5165               	movf	(??_CalculoDeFrecuencia+1)& (0+255),w,b
  3457  007F60  2036               	addwfc	?___aldiv+1,w,c
  3458  007F62  0100               	movlb	0	; () banked
  3459  007F64  6F61               	movwf	(___wmul@multiplier+1)& (0+255),b
  3460  007F66  0E00               	movlw	0
  3461  007F68  0100               	movlb	0	; () banked
  3462  007F6A  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  3463  007F6C  0E03               	movlw	3
  3464  007F6E  6F62               	movwf	___wmul@multiplicand& (0+255),b
  3465  007F70  ECC7  F03B         	call	___wmul	;wreg free
  3466  007F74                     L3:
  3467  007F74  C060  F003         	movff	?___wmul,_MedioPeriodoSet
  3468  007F78  C061  F004         	movff	?___wmul+1,_MedioPeriodoSet+1
  3469                           
  3470                           ;Tecnica1.c: 188: }
  3471  007F7C  D02B               	goto	l2819
  3472  007F7E                     l2809:
  3473                           
  3474                           ;Tecnica1.c: 189: else if(frecuencia<=20){
  3475  007F7E  504E               	movf	_frecuencia+1,w,c
  3476  007F80  E129               	bnz	l2819
  3477  007F82  0E15               	movlw	21
  3478  007F84  5C4D               	subwf	_frecuencia,w,c
  3479  007F86  B0D8               	btfsc	status,0,c
  3480  007F88  D025               	goto	l2819
  3481                           
  3482                           ;Tecnica1.c: 190: MultiplicadorSet = 12;
  3483  007F8A  0E0C               	movlw	12
  3484  007F8C  6E0D               	movwf	_MultiplicadorSet,c
  3485                           
  3486                           ;Tecnica1.c: 191: T1CONbits.T1CKPS0 = 1;
  3487  007F8E  88CD               	bsf	4045,4,c	;volatile
  3488                           
  3489                           ;Tecnica1.c: 192: T1CONbits.T1CKPS1 = 1;
  3490  007F90  8ACD               	bsf	4045,5,c	;volatile
  3491                           
  3492                           ;Tecnica1.c: 193: MedioPeriodoSet=(62500/frecuencia - OffsetPeriodo);
  3493  007F92  5047               	movf	_OffsetPeriodo,w,c
  3494  007F94  0100               	movlb	0	; () banked
  3495  007F96  6F64               	movwf	??_CalculoDeFrecuencia& (0+255),b
  3496  007F98  6B65               	clrf	(??_CalculoDeFrecuencia+1)& (0+255),b
  3497  007F9A  0100               	movlb	0	; () banked
  3498  007F9C  1F64               	comf	??_CalculoDeFrecuencia& (0+255),f,b
  3499  007F9E  1F65               	comf	(??_CalculoDeFrecuencia+1)& (0+255),f,b
  3500  007FA0  4B64               	infsnz	??_CalculoDeFrecuencia& (0+255),f,b
  3501  007FA2  2B65               	incf	(??_CalculoDeFrecuencia+1)& (0+255),f,b
  3502  007FA4  0E24               	movlw	36
  3503  007FA6  6E35               	movwf	___aldiv@dividend,c
  3504  007FA8  0EF4               	movlw	244
  3505  007FAA  6E36               	movwf	___aldiv@dividend+1,c
  3506  007FAC  0E00               	movlw	0
  3507  007FAE  6E37               	movwf	___aldiv@dividend+2,c
  3508  007FB0  0E00               	movlw	0
  3509  007FB2  6E38               	movwf	___aldiv@dividend+3,c
  3510  007FB4  C04D  F039         	movff	_frecuencia,___aldiv@divisor
  3511  007FB8  C04E  F03A         	movff	_frecuencia+1,___aldiv@divisor+1
  3512  007FBC  6A3B               	clrf	___aldiv@divisor+2,c
  3513  007FBE  6A3C               	clrf	___aldiv@divisor+3,c
  3514  007FC0  EC38  F03D         	call	___aldiv	;wreg free
  3515  007FC4  0100               	movlb	0	; () banked
  3516  007FC6  5164               	movf	??_CalculoDeFrecuencia& (0+255),w,b
  3517  007FC8  2435               	addwf	?___aldiv,w,c
  3518  007FCA  6E03               	movwf	_MedioPeriodoSet,c
  3519  007FCC  0100               	movlb	0	; () banked
  3520  007FCE  5165               	movf	(??_CalculoDeFrecuencia+1)& (0+255),w,b
  3521  007FD0  2036               	addwfc	?___aldiv+1,w,c
  3522  007FD2  6E04               	movwf	_MedioPeriodoSet+1,c
  3523  007FD4                     l2819:
  3524                           
  3525                           ;Tecnica1.c: 195: }
  3526                           ;Tecnica1.c: 196: MedioPeriodoSet = 65535 - MedioPeriodoSet;
  3527  007FD4  C003  F064         	movff	_MedioPeriodoSet,??_CalculoDeFrecuencia
  3528  007FD8  C004  F065         	movff	_MedioPeriodoSet+1,??_CalculoDeFrecuencia+1
  3529  007FDC  0100               	movlb	0	; () banked
  3530  007FDE  1F64               	comf	??_CalculoDeFrecuencia& (0+255),f,b
  3531  007FE0  1F65               	comf	(??_CalculoDeFrecuencia+1)& (0+255),f,b
  3532  007FE2  4B64               	infsnz	??_CalculoDeFrecuencia& (0+255),f,b
  3533  007FE4  2B65               	incf	(??_CalculoDeFrecuencia+1)& (0+255),f,b
  3534  007FE6  0EFF               	movlw	255
  3535  007FE8  0100               	movlb	0	; () banked
  3536  007FEA  2564               	addwf	??_CalculoDeFrecuencia& (0+255),w,b
  3537  007FEC  6E03               	movwf	_MedioPeriodoSet,c
  3538  007FEE  0EFF               	movlw	255
  3539  007FF0  0100               	movlb	0	; () banked
  3540  007FF2  2165               	addwfc	(??_CalculoDeFrecuencia+1)& (0+255),w,b
  3541  007FF4  6E04               	movwf	_MedioPeriodoSet+1,c
  3542                           
  3543                           ; BSR set to: 0
  3544                           ;Tecnica1.c: 197: UpperByte =(unsigned char)(MedioPeriodoSet>>8);
  3545  007FF6  5004               	movf	_MedioPeriodoSet+1,w,c
  3546  007FF8  6E48               	movwf	_UpperByte,c
  3547                           
  3548                           ; BSR set to: 0
  3549                           ;Tecnica1.c: 198: LowerByte =(unsigned char)MedioPeriodoSet;
  3550  007FFA  C003  F00B         	movff	_MedioPeriodoSet,_LowerByte
  3551                           
  3552                           ; BSR set to: 0
  3553  007FFE  0012               	return		;funcret
  3554  008000                     __end_of_CalculoDeFrecuencia:
  3555                           	opt stack 0
  3556                           tblptru	equ	0xFF8
  3557                           tblptrh	equ	0xFF7
  3558                           tblptrl	equ	0xFF6
  3559                           tablat	equ	0xFF5
  3560                           prodh	equ	0xFF4
  3561                           prodl	equ	0xFF3
  3562                           intcon	equ	0xFF2
  3563                           postinc0	equ	0xFEE
  3564                           wreg	equ	0xFE8
  3565                           postdec1	equ	0xFE5
  3566                           fsr1l	equ	0xFE1
  3567                           status	equ	0xFD8
  3568                           
  3569 ;; *************** function ___wmul *****************
  3570 ;; Defined at:
  3571 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
  3572 ;; Parameters:    Size  Location     Type
  3573 ;;  multiplier      2    0[BANK0 ] unsigned int 
  3574 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  3575 ;; Auto vars:     Size  Location     Type
  3576 ;;  product         2   30[COMRAM] unsigned int 
  3577 ;; Return value:  Size  Location     Type
  3578 ;;                  2    0[BANK0 ] unsigned int 
  3579 ;; Registers used:
  3580 ;;		wreg, status,2, status,0, prodl, prodh
  3581 ;; Tracked objects:
  3582 ;;		On entry : 0/0
  3583 ;;		On exit  : 0/0
  3584 ;;		Unchanged: 0/0
  3585 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3586 ;;      Params:         0       4       0       0       0       0       0       0       0
  3587 ;;      Locals:         2       0       0       0       0       0       0       0       0
  3588 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3589 ;;      Totals:         2       4       0       0       0       0       0       0       0
  3590 ;;Total ram usage:        6 bytes
  3591 ;; Hardware stack levels used:    1
  3592 ;; Hardware stack levels required when called:    4
  3593 ;; This function calls:
  3594 ;;		Nothing
  3595 ;; This function is called by:
  3596 ;;		_CalculoDeFrecuencia
  3597 ;; This function uses a non-reentrant model
  3598 ;;
  3599                           
  3600                           	psect	text26
  3601  00778E                     __ptext26:
  3602                           	opt stack 0
  3603  00778E                     ___wmul:
  3604                           	opt stack 24
  3605                           
  3606                           ; BSR set to: 0
  3607                           ;incstack = 0
  3608  00778E  0100               	movlb	0	; () banked
  3609  007790  5160               	movf	___wmul@multiplier& (0+255),w,b
  3610  007792  0100               	movlb	0	; () banked
  3611  007794  0362               	mulwf	___wmul@multiplicand& (0+255),b
  3612  007796  CFF3 F043          	movff	prodl,___wmul@product
  3613  00779A  CFF4 F044          	movff	prodh,___wmul@product+1
  3614  00779E  0100               	movlb	0	; () banked
  3615  0077A0  5160               	movf	___wmul@multiplier& (0+255),w,b
  3616  0077A2  0100               	movlb	0	; () banked
  3617  0077A4  0363               	mulwf	(___wmul@multiplicand+1)& (0+255),b
  3618  0077A6  50F3               	movf	prodl,w,c
  3619  0077A8  2644               	addwf	___wmul@product+1,f,c
  3620  0077AA  0100               	movlb	0	; () banked
  3621  0077AC  5161               	movf	(___wmul@multiplier+1)& (0+255),w,b
  3622  0077AE  0100               	movlb	0	; () banked
  3623  0077B0  0362               	mulwf	___wmul@multiplicand& (0+255),b
  3624  0077B2  50F3               	movf	prodl,w,c
  3625  0077B4  2644               	addwf	___wmul@product+1,f,c
  3626                           
  3627                           ; BSR set to: 0
  3628  0077B6  C043  F060         	movff	___wmul@product,?___wmul
  3629  0077BA  C044  F061         	movff	___wmul@product+1,?___wmul+1
  3630  0077BE  0012               	return	
  3631  0077C0                     __end_of___wmul:
  3632                           	opt stack 0
  3633                           tblptru	equ	0xFF8
  3634                           tblptrh	equ	0xFF7
  3635                           tblptrl	equ	0xFF6
  3636                           tablat	equ	0xFF5
  3637                           prodh	equ	0xFF4
  3638                           prodl	equ	0xFF3
  3639                           intcon	equ	0xFF2
  3640                           postinc0	equ	0xFEE
  3641                           wreg	equ	0xFE8
  3642                           postdec1	equ	0xFE5
  3643                           fsr1l	equ	0xFE1
  3644                           status	equ	0xFD8
  3645                           
  3646 ;; *************** function ___aldiv *****************
  3647 ;; Defined at:
  3648 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\aldiv.c"
  3649 ;; Parameters:    Size  Location     Type
  3650 ;;  dividend        4   16[COMRAM] long 
  3651 ;;  divisor         4   20[COMRAM] long 
  3652 ;; Auto vars:     Size  Location     Type
  3653 ;;  quotient        4   26[COMRAM] long 
  3654 ;;  sign            1   25[COMRAM] unsigned char 
  3655 ;;  counter         1   24[COMRAM] unsigned char 
  3656 ;; Return value:  Size  Location     Type
  3657 ;;                  4   16[COMRAM] long 
  3658 ;; Registers used:
  3659 ;;		wreg, status,2, status,0
  3660 ;; Tracked objects:
  3661 ;;		On entry : 0/0
  3662 ;;		On exit  : 0/0
  3663 ;;		Unchanged: 0/0
  3664 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3665 ;;      Params:         8       0       0       0       0       0       0       0       0
  3666 ;;      Locals:         6       0       0       0       0       0       0       0       0
  3667 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3668 ;;      Totals:        14       0       0       0       0       0       0       0       0
  3669 ;;Total ram usage:       14 bytes
  3670 ;; Hardware stack levels used:    1
  3671 ;; Hardware stack levels required when called:    4
  3672 ;; This function calls:
  3673 ;;		Nothing
  3674 ;; This function is called by:
  3675 ;;		_CalculoDeFrecuencia
  3676 ;; This function uses a non-reentrant model
  3677 ;;
  3678                           
  3679                           	psect	text27
  3680  007A70                     __ptext27:
  3681                           	opt stack 0
  3682  007A70                     ___aldiv:
  3683                           	opt stack 24
  3684                           
  3685                           ; BSR set to: 0
  3686                           ;incstack = 0
  3687  007A70  0E00               	movlw	0
  3688  007A72  6E3E               	movwf	___aldiv@sign,c
  3689  007A74  AE3C               	btfss	___aldiv@divisor+3,7,c
  3690  007A76  D00A               	goto	l2731
  3691  007A78  1E3C               	comf	___aldiv@divisor+3,f,c
  3692  007A7A  1E3B               	comf	___aldiv@divisor+2,f,c
  3693  007A7C  1E3A               	comf	___aldiv@divisor+1,f,c
  3694  007A7E  6C39               	negf	___aldiv@divisor,c
  3695  007A80  0E00               	movlw	0
  3696  007A82  223A               	addwfc	___aldiv@divisor+1,f,c
  3697  007A84  223B               	addwfc	___aldiv@divisor+2,f,c
  3698  007A86  223C               	addwfc	___aldiv@divisor+3,f,c
  3699  007A88  0E01               	movlw	1
  3700  007A8A  6E3E               	movwf	___aldiv@sign,c
  3701  007A8C                     l2731:
  3702  007A8C  AE38               	btfss	___aldiv@dividend+3,7,c
  3703  007A8E  D00A               	goto	l2737
  3704  007A90  1E38               	comf	___aldiv@dividend+3,f,c
  3705  007A92  1E37               	comf	___aldiv@dividend+2,f,c
  3706  007A94  1E36               	comf	___aldiv@dividend+1,f,c
  3707  007A96  6C35               	negf	___aldiv@dividend,c
  3708  007A98  0E00               	movlw	0
  3709  007A9A  2236               	addwfc	___aldiv@dividend+1,f,c
  3710  007A9C  2237               	addwfc	___aldiv@dividend+2,f,c
  3711  007A9E  2238               	addwfc	___aldiv@dividend+3,f,c
  3712  007AA0  0E01               	movlw	1
  3713  007AA2  1A3E               	xorwf	___aldiv@sign,f,c
  3714  007AA4                     l2737:
  3715  007AA4  0E00               	movlw	0
  3716  007AA6  6E3F               	movwf	___aldiv@quotient,c
  3717  007AA8  0E00               	movlw	0
  3718  007AAA  6E40               	movwf	___aldiv@quotient+1,c
  3719  007AAC  0E00               	movlw	0
  3720  007AAE  6E41               	movwf	___aldiv@quotient+2,c
  3721  007AB0  0E00               	movlw	0
  3722  007AB2  6E42               	movwf	___aldiv@quotient+3,c
  3723  007AB4  5039               	movf	___aldiv@divisor,w,c
  3724  007AB6  103A               	iorwf	___aldiv@divisor+1,w,c
  3725  007AB8  103B               	iorwf	___aldiv@divisor+2,w,c
  3726  007ABA  103C               	iorwf	___aldiv@divisor+3,w,c
  3727  007ABC  B4D8               	btfsc	status,2,c
  3728  007ABE  D02A               	goto	l2759
  3729  007AC0  0E01               	movlw	1
  3730  007AC2  6E3D               	movwf	___aldiv@counter,c
  3731  007AC4  D006               	goto	l2745
  3732  007AC6                     l2743:
  3733  007AC6  90D8               	bcf	status,0,c
  3734  007AC8  3639               	rlcf	___aldiv@divisor,f,c
  3735  007ACA  363A               	rlcf	___aldiv@divisor+1,f,c
  3736  007ACC  363B               	rlcf	___aldiv@divisor+2,f,c
  3737  007ACE  363C               	rlcf	___aldiv@divisor+3,f,c
  3738  007AD0  2A3D               	incf	___aldiv@counter,f,c
  3739  007AD2                     l2745:
  3740  007AD2  AE3C               	btfss	___aldiv@divisor+3,7,c
  3741  007AD4  D7F8               	goto	l2743
  3742  007AD6                     l2747:
  3743  007AD6  90D8               	bcf	status,0,c
  3744  007AD8  363F               	rlcf	___aldiv@quotient,f,c
  3745  007ADA  3640               	rlcf	___aldiv@quotient+1,f,c
  3746  007ADC  3641               	rlcf	___aldiv@quotient+2,f,c
  3747  007ADE  3642               	rlcf	___aldiv@quotient+3,f,c
  3748  007AE0  5039               	movf	___aldiv@divisor,w,c
  3749  007AE2  5C35               	subwf	___aldiv@dividend,w,c
  3750  007AE4  503A               	movf	___aldiv@divisor+1,w,c
  3751  007AE6  5836               	subwfb	___aldiv@dividend+1,w,c
  3752  007AE8  503B               	movf	___aldiv@divisor+2,w,c
  3753  007AEA  5837               	subwfb	___aldiv@dividend+2,w,c
  3754  007AEC  503C               	movf	___aldiv@divisor+3,w,c
  3755  007AEE  5838               	subwfb	___aldiv@dividend+3,w,c
  3756  007AF0  A0D8               	btfss	status,0,c
  3757  007AF2  D009               	goto	l2755
  3758  007AF4  5039               	movf	___aldiv@divisor,w,c
  3759  007AF6  5E35               	subwf	___aldiv@dividend,f,c
  3760  007AF8  503A               	movf	___aldiv@divisor+1,w,c
  3761  007AFA  5A36               	subwfb	___aldiv@dividend+1,f,c
  3762  007AFC  503B               	movf	___aldiv@divisor+2,w,c
  3763  007AFE  5A37               	subwfb	___aldiv@dividend+2,f,c
  3764  007B00  503C               	movf	___aldiv@divisor+3,w,c
  3765  007B02  5A38               	subwfb	___aldiv@dividend+3,f,c
  3766  007B04  803F               	bsf	___aldiv@quotient,0,c
  3767  007B06                     l2755:
  3768  007B06  90D8               	bcf	status,0,c
  3769  007B08  323C               	rrcf	___aldiv@divisor+3,f,c
  3770  007B0A  323B               	rrcf	___aldiv@divisor+2,f,c
  3771  007B0C  323A               	rrcf	___aldiv@divisor+1,f,c
  3772  007B0E  3239               	rrcf	___aldiv@divisor,f,c
  3773  007B10  2E3D               	decfsz	___aldiv@counter,f,c
  3774  007B12  D7E1               	goto	l2747
  3775  007B14                     l2759:
  3776  007B14  503E               	movf	___aldiv@sign,w,c
  3777  007B16  B4D8               	btfsc	status,2,c
  3778  007B18  D008               	goto	l2763
  3779  007B1A  1E42               	comf	___aldiv@quotient+3,f,c
  3780  007B1C  1E41               	comf	___aldiv@quotient+2,f,c
  3781  007B1E  1E40               	comf	___aldiv@quotient+1,f,c
  3782  007B20  6C3F               	negf	___aldiv@quotient,c
  3783  007B22  0E00               	movlw	0
  3784  007B24  2240               	addwfc	___aldiv@quotient+1,f,c
  3785  007B26  2241               	addwfc	___aldiv@quotient+2,f,c
  3786  007B28  2242               	addwfc	___aldiv@quotient+3,f,c
  3787  007B2A                     l2763:
  3788  007B2A  C03F  F035         	movff	___aldiv@quotient,?___aldiv
  3789  007B2E  C040  F036         	movff	___aldiv@quotient+1,?___aldiv+1
  3790  007B32  C041  F037         	movff	___aldiv@quotient+2,?___aldiv+2
  3791  007B36  C042  F038         	movff	___aldiv@quotient+3,?___aldiv+3
  3792  007B3A  0012               	return	
  3793  007B3C                     __end_of___aldiv:
  3794                           	opt stack 0
  3795                           tblptru	equ	0xFF8
  3796                           tblptrh	equ	0xFF7
  3797                           tblptrl	equ	0xFF6
  3798                           tablat	equ	0xFF5
  3799                           prodh	equ	0xFF4
  3800                           prodl	equ	0xFF3
  3801                           intcon	equ	0xFF2
  3802                           postinc0	equ	0xFEE
  3803                           wreg	equ	0xFE8
  3804                           postdec1	equ	0xFE5
  3805                           fsr1l	equ	0xFE1
  3806                           status	equ	0xFD8
  3807                           
  3808 ;; *************** function _myISR *****************
  3809 ;; Defined at:
  3810 ;;		line 33 in file "main.c"
  3811 ;; Parameters:    Size  Location     Type
  3812 ;;		None
  3813 ;; Auto vars:     Size  Location     Type
  3814 ;;		None
  3815 ;; Return value:  Size  Location     Type
  3816 ;;                  1    wreg      void 
  3817 ;; Registers used:
  3818 ;;		wreg, status,2, status,0, cstack
  3819 ;; Tracked objects:
  3820 ;;		On entry : 0/0
  3821 ;;		On exit  : 0/0
  3822 ;;		Unchanged: 0/0
  3823 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3824 ;;      Params:         0       0       0       0       0       0       0       0       0
  3825 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3826 ;;      Temps:         14       0       0       0       0       0       0       0       0
  3827 ;;      Totals:        14       0       0       0       0       0       0       0       0
  3828 ;;Total ram usage:       14 bytes
  3829 ;; Hardware stack levels used:    1
  3830 ;; Hardware stack levels required when called:    3
  3831 ;; This function calls:
  3832 ;;		_tic_demo_shield2_1
  3833 ;; This function is called by:
  3834 ;;		Interrupt level 2
  3835 ;; This function uses a non-reentrant model
  3836 ;;
  3837                           
  3838                           	psect	intcode
  3839  002008                     __pintcode:
  3840                           	opt stack 0
  3841  002008                     _myISR:
  3842                           	opt stack 23
  3843                           
  3844                           ;incstack = 0
  3845  002008  824F               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  3846  00200A  EDAE  F03C         	call	int_func,f	;refresh shadow registers
  3847                           tblptru	equ	0xFF8
  3848                           tblptrh	equ	0xFF7
  3849                           tblptrl	equ	0xFF6
  3850                           tablat	equ	0xFF5
  3851                           prodh	equ	0xFF4
  3852                           prodl	equ	0xFF3
  3853                           intcon	equ	0xFF2
  3854                           postinc0	equ	0xFEE
  3855                           wreg	equ	0xFE8
  3856                           postdec1	equ	0xFE5
  3857                           fsr1l	equ	0xFE1
  3858                           status	equ	0xFD8
  3859                           
  3860                           	psect	intcode_body
  3861  00795C                     __pintcode_body:
  3862                           	opt stack 23
  3863  00795C                     int_func:
  3864                           	opt stack 23
  3865  00795C  0006               	pop		; remove dummy address from shadow register refresh
  3866  00795E  CFFA F027          	movff	pclath,??_myISR
  3867  007962  CFFB F028          	movff	pclatu,??_myISR+1
  3868  007966  CFE9 F029          	movff	fsr0l,??_myISR+2
  3869  00796A  CFEA F02A          	movff	fsr0h,??_myISR+3
  3870  00796E  CFE1 F02B          	movff	fsr1l,??_myISR+4
  3871  007972  CFE2 F02C          	movff	fsr1h,??_myISR+5
  3872  007976  CFD9 F02D          	movff	fsr2l,??_myISR+6
  3873  00797A  CFDA F02E          	movff	fsr2h,??_myISR+7
  3874  00797E  CFF3 F02F          	movff	prodl,??_myISR+8
  3875  007982  CFF4 F030          	movff	prodh,??_myISR+9
  3876  007986  CFF6 F031          	movff	tblptrl,??_myISR+10
  3877  00798A  CFF7 F032          	movff	tblptrh,??_myISR+11
  3878  00798E  CFF8 F033          	movff	tblptru,??_myISR+12
  3879  007992  CFF5 F034          	movff	tablat,??_myISR+13
  3880                           
  3881                           ;main.c: 35: if(TMR0IF){
  3882  007996  A4F2               	btfss	intcon,2,c	;volatile
  3883  007998  D006               	goto	i2l26
  3884                           
  3885                           ;main.c: 36: INTCONbits.TMR0IF = 0;
  3886  00799A  94F2               	bcf	intcon,2,c	;volatile
  3887                           
  3888                           ;main.c: 37: TMR0L = 209;
  3889  00799C  0ED1               	movlw	209
  3890  00799E  6ED6               	movwf	4054,c	;volatile
  3891                           
  3892                           ;main.c: 38: TMR0H = 0xFF;
  3893  0079A0  68D7               	setf	4055,c	;volatile
  3894                           
  3895                           ;main.c: 42: tic_demo_shield2_1();
  3896  0079A2  ECE2  F03A         	call	_tic_demo_shield2_1	;wreg free
  3897  0079A6                     i2l26:
  3898  0079A6  C034  FFF5         	movff	??_myISR+13,tablat
  3899  0079AA  C033  FFF8         	movff	??_myISR+12,tblptru
  3900  0079AE  C032  FFF7         	movff	??_myISR+11,tblptrh
  3901  0079B2  C031  FFF6         	movff	??_myISR+10,tblptrl
  3902  0079B6  C030  FFF4         	movff	??_myISR+9,prodh
  3903  0079BA  C02F  FFF3         	movff	??_myISR+8,prodl
  3904  0079BE  C02E  FFDA         	movff	??_myISR+7,fsr2h
  3905  0079C2  C02D  FFD9         	movff	??_myISR+6,fsr2l
  3906  0079C6  C02C  FFE2         	movff	??_myISR+5,fsr1h
  3907  0079CA  C02B  FFE1         	movff	??_myISR+4,fsr1l
  3908  0079CE  C02A  FFEA         	movff	??_myISR+3,fsr0h
  3909  0079D2  C029  FFE9         	movff	??_myISR+2,fsr0l
  3910  0079D6  C028  FFFB         	movff	??_myISR+1,pclatu
  3911  0079DA  C027  FFFA         	movff	??_myISR,pclath
  3912  0079DE  924F               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  3913  0079E0  0011               	retfie		f
  3914  0079E2                     __end_of_myISR:
  3915                           	opt stack 0
  3916                           pclatu	equ	0xFFB
  3917                           pclath	equ	0xFFA
  3918                           tblptru	equ	0xFF8
  3919                           tblptrh	equ	0xFF7
  3920                           tblptrl	equ	0xFF6
  3921                           tablat	equ	0xFF5
  3922                           prodh	equ	0xFF4
  3923                           prodl	equ	0xFF3
  3924                           intcon	equ	0xFF2
  3925                           postinc0	equ	0xFEE
  3926                           fsr0h	equ	0xFEA
  3927                           fsr0l	equ	0xFE9
  3928                           wreg	equ	0xFE8
  3929                           postdec1	equ	0xFE5
  3930                           fsr1h	equ	0xFE2
  3931                           fsr1l	equ	0xFE1
  3932                           fsr2h	equ	0xFDA
  3933                           fsr2l	equ	0xFD9
  3934                           status	equ	0xFD8
  3935                           
  3936 ;; *************** function _tic_demo_shield2_1 *****************
  3937 ;; Defined at:
  3938 ;;		line 341 in file "Tecnica1.c"
  3939 ;; Parameters:    Size  Location     Type
  3940 ;;		None
  3941 ;; Auto vars:     Size  Location     Type
  3942 ;;		None
  3943 ;; Return value:  Size  Location     Type
  3944 ;;                  1    wreg      void 
  3945 ;; Registers used:
  3946 ;;		wreg, status,2, status,0, cstack
  3947 ;; Tracked objects:
  3948 ;;		On entry : 0/0
  3949 ;;		On exit  : 0/0
  3950 ;;		Unchanged: 0/0
  3951 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3952 ;;      Params:         0       0       0       0       0       0       0       0       0
  3953 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3954 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3955 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3956 ;;Total ram usage:        0 bytes
  3957 ;; Hardware stack levels used:    1
  3958 ;; Hardware stack levels required when called:    2
  3959 ;; This function calls:
  3960 ;;		_tic_LCD
  3961 ;;		_tic_debounce
  3962 ;; This function is called by:
  3963 ;;		_myISR
  3964 ;; This function uses a non-reentrant model
  3965 ;;
  3966                           
  3967                           	psect	text29
  3968  0075C4                     __ptext29:
  3969                           	opt stack 0
  3970  0075C4                     _tic_demo_shield2_1:
  3971                           	opt stack 23
  3972                           
  3973                           ;Tecnica1.c: 342: if (desplazar_tout)desplazar_tout--;
  3974                           
  3975                           ;incstack = 0
  3976  0075C4  5005               	movf	_desplazar_tout,w,c
  3977  0075C6  1006               	iorwf	_desplazar_tout+1,w,c
  3978  0075C8  B4D8               	btfsc	status,2,c
  3979  0075CA  D003               	goto	i2l1881
  3980  0075CC  0605               	decf	_desplazar_tout,f,c
  3981  0075CE  A0D8               	btfss	status,0,c
  3982  0075D0  0606               	decf	_desplazar_tout+1,f,c
  3983  0075D2                     i2l1881:
  3984                           
  3985                           ;Tecnica1.c: 343: tic_debounce();
  3986  0075D2  ECFA  F03A         	call	_tic_debounce	;wreg free
  3987                           
  3988                           ;Tecnica1.c: 344: tic_LCD();
  3989  0075D6  ECCA  F03A         	call	_tic_LCD	;wreg free
  3990  0075DA  0012               	return		;funcret
  3991  0075DC                     __end_of_tic_demo_shield2_1:
  3992                           	opt stack 0
  3993                           pclatu	equ	0xFFB
  3994                           pclath	equ	0xFFA
  3995                           tblptru	equ	0xFF8
  3996                           tblptrh	equ	0xFF7
  3997                           tblptrl	equ	0xFF6
  3998                           tablat	equ	0xFF5
  3999                           prodh	equ	0xFF4
  4000                           prodl	equ	0xFF3
  4001                           intcon	equ	0xFF2
  4002                           postinc0	equ	0xFEE
  4003                           fsr0h	equ	0xFEA
  4004                           fsr0l	equ	0xFE9
  4005                           wreg	equ	0xFE8
  4006                           postdec1	equ	0xFE5
  4007                           fsr1h	equ	0xFE2
  4008                           fsr1l	equ	0xFE1
  4009                           fsr2h	equ	0xFDA
  4010                           fsr2l	equ	0xFD9
  4011                           status	equ	0xFD8
  4012                           
  4013 ;; *************** function _tic_debounce *****************
  4014 ;; Defined at:
  4015 ;;		line 202 in file "Tecnica1.c"
  4016 ;; Parameters:    Size  Location     Type
  4017 ;;		None
  4018 ;; Auto vars:     Size  Location     Type
  4019 ;;		None
  4020 ;; Return value:  Size  Location     Type
  4021 ;;                  1    wreg      void 
  4022 ;; Registers used:
  4023 ;;		wreg, status,2, status,0, cstack
  4024 ;; Tracked objects:
  4025 ;;		On entry : 0/0
  4026 ;;		On exit  : 0/0
  4027 ;;		Unchanged: 0/0
  4028 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4029 ;;      Params:         0       0       0       0       0       0       0       0       0
  4030 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4031 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4032 ;;      Totals:         0       0       0       0       0       0       0       0       0
  4033 ;;Total ram usage:        0 bytes
  4034 ;; Hardware stack levels used:    1
  4035 ;; Hardware stack levels required when called:    1
  4036 ;; This function calls:
  4037 ;;		_debounce
  4038 ;; This function is called by:
  4039 ;;		_tic_demo_shield2_1
  4040 ;; This function uses a non-reentrant model
  4041 ;;
  4042                           
  4043                           	psect	text30
  4044  0075F4                     __ptext30:
  4045                           	opt stack 0
  4046  0075F4                     _tic_debounce:
  4047                           	opt stack 23
  4048                           
  4049                           ;Tecnica1.c: 203: static unsigned char debounce_tic = 10;
  4050                           ;Tecnica1.c: 204: if (debounce_tic)debounce_tic--;
  4051                           
  4052                           ;incstack = 0
  4053  0075F4  504B               	movf	tic_debounce@debounce_tic,w,c
  4054  0075F6  B4D8               	btfsc	status,2,c
  4055  0075F8  D002               	goto	i2l1605
  4056  0075FA  064B               	decf	tic_debounce@debounce_tic,f,c
  4057  0075FC  0012               	return	
  4058  0075FE                     i2l1605:
  4059                           
  4060                           ;Tecnica1.c: 205: else {
  4061                           ;Tecnica1.c: 206: debounce_tic = 10;
  4062  0075FE  0E0A               	movlw	10
  4063  007600  6E4B               	movwf	tic_debounce@debounce_tic,c
  4064                           
  4065                           ;Tecnica1.c: 207: EstadoDeLosBotones = debounce((PORTB^0xF0)&0xF0);
  4066  007602  5081               	movf	3969,w,c	;volatile
  4067  007604  0AF0               	xorlw	240
  4068  007606  0BF0               	andlw	240
  4069  007608  EC48  F03B         	call	_debounce
  4070  00760C  6E0A               	movwf	_EstadoDeLosBotones,c
  4071  00760E  0012               	return	
  4072  007610                     __end_of_tic_debounce:
  4073                           	opt stack 0
  4074                           pclatu	equ	0xFFB
  4075                           pclath	equ	0xFFA
  4076                           tblptru	equ	0xFF8
  4077                           tblptrh	equ	0xFF7
  4078                           tblptrl	equ	0xFF6
  4079                           tablat	equ	0xFF5
  4080                           prodh	equ	0xFF4
  4081                           prodl	equ	0xFF3
  4082                           intcon	equ	0xFF2
  4083                           postinc0	equ	0xFEE
  4084                           fsr0h	equ	0xFEA
  4085                           fsr0l	equ	0xFE9
  4086                           wreg	equ	0xFE8
  4087                           postdec1	equ	0xFE5
  4088                           fsr1h	equ	0xFE2
  4089                           fsr1l	equ	0xFE1
  4090                           fsr2h	equ	0xFDA
  4091                           fsr2l	equ	0xFD9
  4092                           status	equ	0xFD8
  4093                           
  4094 ;; *************** function _debounce *****************
  4095 ;; Defined at:
  4096 ;;		line 103 in file "Tecnica1.c"
  4097 ;; Parameters:    Size  Location     Type
  4098 ;;  sample          1    wreg     unsigned char 
  4099 ;; Auto vars:     Size  Location     Type
  4100 ;;  sample          1    0[COMRAM] unsigned char 
  4101 ;;  delta           1    1[COMRAM] unsigned char 
  4102 ;; Return value:  Size  Location     Type
  4103 ;;                  1    wreg      unsigned char 
  4104 ;; Registers used:
  4105 ;;		wreg, status,2, status,0
  4106 ;; Tracked objects:
  4107 ;;		On entry : 0/0
  4108 ;;		On exit  : 0/0
  4109 ;;		Unchanged: 0/0
  4110 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4111 ;;      Params:         0       0       0       0       0       0       0       0       0
  4112 ;;      Locals:         2       0       0       0       0       0       0       0       0
  4113 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4114 ;;      Totals:         2       0       0       0       0       0       0       0       0
  4115 ;;Total ram usage:        2 bytes
  4116 ;; Hardware stack levels used:    1
  4117 ;; This function calls:
  4118 ;;		Nothing
  4119 ;; This function is called by:
  4120 ;;		_tic_debounce
  4121 ;; This function uses a non-reentrant model
  4122 ;;
  4123                           
  4124                           	psect	text31
  4125  007690                     __ptext31:
  4126                           	opt stack 0
  4127  007690                     _debounce:
  4128                           	opt stack 23
  4129                           
  4130                           ;incstack = 0
  4131                           ;debounce@sample stored from wreg
  4132  007690  6E25               	movwf	debounce@sample,c
  4133                           
  4134                           ;Tecnica1.c: 104: static unsigned char state, cnt0, cnt1;
  4135                           ;Tecnica1.c: 105: unsigned char delta;
  4136                           ;Tecnica1.c: 106: delta = (sample) ^ state;
  4137  007692  5025               	movf	debounce@sample,w,c
  4138  007694  1819               	xorwf	debounce@state,w,c
  4139  007696  6E26               	movwf	debounce@delta,c
  4140                           
  4141                           ;Tecnica1.c: 107: cnt1 = (cnt1 ^ cnt0) & delta;
  4142  007698  5018               	movf	debounce@cnt1,w,c
  4143  00769A  1817               	xorwf	debounce@cnt0,w,c
  4144  00769C  1426               	andwf	debounce@delta,w,c
  4145  00769E  6E18               	movwf	debounce@cnt1,c
  4146                           
  4147                           ;Tecnica1.c: 108: cnt0 = ~cnt0 & delta;
  4148  0076A0  5017               	movf	debounce@cnt0,w,c
  4149  0076A2  0AFF               	xorlw	255
  4150  0076A4  1426               	andwf	debounce@delta,w,c
  4151  0076A6  6E17               	movwf	debounce@cnt0,c
  4152                           
  4153                           ;Tecnica1.c: 109: state ^= delta & (~(cnt0 | cnt1));
  4154  0076A8  5017               	movf	debounce@cnt0,w,c
  4155  0076AA  1018               	iorwf	debounce@cnt1,w,c
  4156  0076AC  0AFF               	xorlw	255
  4157  0076AE  1426               	andwf	debounce@delta,w,c
  4158  0076B0  1A19               	xorwf	debounce@state,f,c
  4159                           
  4160                           ;Tecnica1.c: 110: return state;
  4161  0076B2  5019               	movf	debounce@state,w,c
  4162  0076B4  0012               	return	
  4163  0076B6                     __end_of_debounce:
  4164                           	opt stack 0
  4165                           pclatu	equ	0xFFB
  4166                           pclath	equ	0xFFA
  4167                           tblptru	equ	0xFF8
  4168                           tblptrh	equ	0xFF7
  4169                           tblptrl	equ	0xFF6
  4170                           tablat	equ	0xFF5
  4171                           prodh	equ	0xFF4
  4172                           prodl	equ	0xFF3
  4173                           intcon	equ	0xFF2
  4174                           postinc0	equ	0xFEE
  4175                           fsr0h	equ	0xFEA
  4176                           fsr0l	equ	0xFE9
  4177                           wreg	equ	0xFE8
  4178                           postdec1	equ	0xFE5
  4179                           fsr1h	equ	0xFE2
  4180                           fsr1l	equ	0xFE1
  4181                           fsr2h	equ	0xFDA
  4182                           fsr2l	equ	0xFD9
  4183                           status	equ	0xFD8
  4184                           
  4185 ;; *************** function _tic_LCD *****************
  4186 ;; Defined at:
  4187 ;;		line 159 in file "lcd.c"
  4188 ;; Parameters:    Size  Location     Type
  4189 ;;		None
  4190 ;; Auto vars:     Size  Location     Type
  4191 ;;		None
  4192 ;; Return value:  Size  Location     Type
  4193 ;;                  1    wreg      void 
  4194 ;; Registers used:
  4195 ;;		wreg, status,2, status,0
  4196 ;; Tracked objects:
  4197 ;;		On entry : 0/0
  4198 ;;		On exit  : 0/0
  4199 ;;		Unchanged: 0/0
  4200 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4201 ;;      Params:         0       0       0       0       0       0       0       0       0
  4202 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4203 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4204 ;;      Totals:         0       0       0       0       0       0       0       0       0
  4205 ;;Total ram usage:        0 bytes
  4206 ;; Hardware stack levels used:    1
  4207 ;; This function calls:
  4208 ;;		Nothing
  4209 ;; This function is called by:
  4210 ;;		_tic_demo_shield2_1
  4211 ;; This function uses a non-reentrant model
  4212 ;;
  4213                           
  4214                           	psect	text32
  4215  007594                     __ptext32:
  4216                           	opt stack 0
  4217  007594                     _tic_LCD:
  4218                           	opt stack 24
  4219                           
  4220                           ;lcd.c: 160: if (LCD_tout) LCD_tout--;
  4221                           
  4222                           ;incstack = 0
  4223  007594  5001               	movf	_LCD_tout,w,c
  4224  007596  1002               	iorwf	_LCD_tout+1,w,c
  4225  007598  B4D8               	btfsc	status,2,c
  4226  00759A  0012               	return	
  4227  00759C  0601               	decf	_LCD_tout,f,c
  4228  00759E  A0D8               	btfss	status,0,c
  4229  0075A0  0602               	decf	_LCD_tout+1,f,c
  4230  0075A2  0012               	return	
  4231  0075A4                     __end_of_tic_LCD:
  4232                           	opt stack 0
  4233                           pclatu	equ	0xFFB
  4234                           pclath	equ	0xFFA
  4235                           tblptru	equ	0xFF8
  4236                           tblptrh	equ	0xFF7
  4237                           tblptrl	equ	0xFF6
  4238                           tablat	equ	0xFF5
  4239                           prodh	equ	0xFF4
  4240                           prodl	equ	0xFF3
  4241                           intcon	equ	0xFF2
  4242                           postinc0	equ	0xFEE
  4243                           fsr0h	equ	0xFEA
  4244                           fsr0l	equ	0xFE9
  4245                           wreg	equ	0xFE8
  4246                           postdec1	equ	0xFE5
  4247                           fsr1h	equ	0xFE2
  4248                           fsr1l	equ	0xFE1
  4249                           fsr2h	equ	0xFDA
  4250                           fsr2l	equ	0xFD9
  4251                           status	equ	0xFD8
  4252                           pclatu	equ	0xFFB
  4253                           pclath	equ	0xFFA
  4254                           tblptru	equ	0xFF8
  4255                           tblptrh	equ	0xFF7
  4256                           tblptrl	equ	0xFF6
  4257                           tablat	equ	0xFF5
  4258                           prodh	equ	0xFF4
  4259                           prodl	equ	0xFF3
  4260                           intcon	equ	0xFF2
  4261                           postinc0	equ	0xFEE
  4262                           fsr0h	equ	0xFEA
  4263                           fsr0l	equ	0xFE9
  4264                           wreg	equ	0xFE8
  4265                           postdec1	equ	0xFE5
  4266                           fsr1h	equ	0xFE2
  4267                           fsr1l	equ	0xFE1
  4268                           fsr2h	equ	0xFDA
  4269                           fsr2l	equ	0xFD9
  4270                           status	equ	0xFD8
  4271                           
  4272                           	psect	rparam
  4273  0000                     pclatu	equ	0xFFB
  4274                           pclath	equ	0xFFA
  4275                           tblptru	equ	0xFF8
  4276                           tblptrh	equ	0xFF7
  4277                           tblptrl	equ	0xFF6
  4278                           tablat	equ	0xFF5
  4279                           prodh	equ	0xFF4
  4280                           prodl	equ	0xFF3
  4281                           intcon	equ	0xFF2
  4282                           postinc0	equ	0xFEE
  4283                           fsr0h	equ	0xFEA
  4284                           fsr0l	equ	0xFE9
  4285                           wreg	equ	0xFE8
  4286                           postdec1	equ	0xFE5
  4287                           fsr1h	equ	0xFE2
  4288                           fsr1l	equ	0xFE1
  4289                           fsr2h	equ	0xFDA
  4290                           fsr2l	equ	0xFD9
  4291                           status	equ	0xFD8
  4292                           
  4293                           	psect	temp
  4294  00004F                     btemp:
  4295                           	opt stack 0
  4296  00004F                     	ds	1
  4297  0000                     int$flags	set	btemp
  4298                           pclatu	equ	0xFFB
  4299                           pclath	equ	0xFFA
  4300                           tblptru	equ	0xFF8
  4301                           tblptrh	equ	0xFF7
  4302                           tblptrl	equ	0xFF6
  4303                           tablat	equ	0xFF5
  4304                           prodh	equ	0xFF4
  4305                           prodl	equ	0xFF3
  4306                           intcon	equ	0xFF2
  4307                           postinc0	equ	0xFEE
  4308                           fsr0h	equ	0xFEA
  4309                           fsr0l	equ	0xFE9
  4310                           wreg	equ	0xFE8
  4311                           postdec1	equ	0xFE5
  4312                           fsr1h	equ	0xFE2
  4313                           fsr1l	equ	0xFE1
  4314                           fsr2h	equ	0xFDA
  4315                           fsr2l	equ	0xFD9
  4316                           status	equ	0xFD8


Data Sizes:
    Strings     67
    Constant    12
    Data        10
    BSS         36
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     32      78
    BANK0           160      7       7
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    informar@dato	PTR const unsigned char  size(2) Largest target is 6
		 -> STR_3(CODE[6]), 

    msg2LCD@datos	PTR const unsigned char  size(2) Largest target is 28
		 -> STR_8(CODE[28]), STR_7(CODE[5]), STR_6(CODE[5]), STR_5(CODE[5]), 
		 -> STR_2(CODE[5]), STR_1(CODE[13]), 


Critical Paths under _main in COMRAM

    _LCD_init->_write_CMD
    _set_CURSOR->_write_CMD
    _ret_HOME->_write_CMD
    _msg2LCD->_write_DATA
    _informar->_transmitir
    _clear_LCD->_write_CMD
    _char2LCD->_write_DATA
    _write_DATA->_write_LCD
    ___awdiv->___awmod
    _DesplazarIzquierda->_write_CMD
    _write_CMD->_write_LCD
    _CalculoDeFrecuencia->___wmul
    ___wmul->___aldiv

Critical Paths under _myISR in COMRAM

    _tic_debounce->_debounce

Critical Paths under _main in BANK0

    _demo_shield2_1_INI->_CalculoDeFrecuencia
    _demo_shield2_1->_AumentarPeriodo
    _demo_shield2_1->_DisminuirPeriodo
    _DisminuirPeriodo->_CalculoDeFrecuencia
    _AumentarPeriodo->_CalculoDeFrecuencia
    _CalculoDeFrecuencia->___wmul

Critical Paths under _myISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _myISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _myISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _myISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _myISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _myISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _myISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _myISR in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    9066
                     _demo_shield2_1
                 _demo_shield2_1_INI
 ---------------------------------------------------------------------------------
 (1) _demo_shield2_1_INI                                   0     0      0    2672
                _CalculoDeFrecuencia
                           _LCD_init
                           _PicIni21
                         _TIMER0_INI
                         _TIMER1_INI
                          _USART_INI
                          _clear_LCD
                            _msg2LCD
 ---------------------------------------------------------------------------------
 (2) _USART_INI                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TIMER1_INI                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TIMER0_INI                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PicIni21                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _LCD_init                                             0     0      0      60
                          _read_BUSY
                          _write_CMD
 ---------------------------------------------------------------------------------
 (1) _demo_shield2_1                                       0     0      0    6394
                    _AumentarPeriodo
                 _DesplazarIzquierda
                   _DisminuirPeriodo
                            ___awdiv
                            ___awmod
                           _char2LCD
                          _clear_LCD
                           _informar
                            _msg2LCD
                       _obtener_ADC8
                           _ret_HOME
                         _set_CURSOR
                         _transmitir
 ---------------------------------------------------------------------------------
 (2) _set_CURSOR                                           1     1      0      75
                                             18 COMRAM     1     1      0
                          _read_BUSY
                          _write_CMD
 ---------------------------------------------------------------------------------
 (2) _ret_HOME                                             0     0      0      60
                          _read_BUSY
                          _write_CMD
 ---------------------------------------------------------------------------------
 (2) _obtener_ADC8                                         2     2      0      30
                                             16 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (2) _msg2LCD                                              2     0      2     489
                                             18 COMRAM     2     0      2
                          _read_BUSY
                         _write_DATA
 ---------------------------------------------------------------------------------
 (2) _informar                                             6     3      3     234
                                             17 COMRAM     6     3      3
                         _transmitir
 ---------------------------------------------------------------------------------
 (2) _transmitir                                           1     1      0      15
                                             16 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _clear_LCD                                            0     0      0      60
                          _read_BUSY
                          _write_CMD
 ---------------------------------------------------------------------------------
 (2) _char2LCD                                             1     1      0      75
                                             18 COMRAM     1     1      0
                          _read_BUSY
                         _write_DATA
 ---------------------------------------------------------------------------------
 (3) _write_DATA                                           1     1      0      45
                                             17 COMRAM     1     1      0
                          _write_LCD
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              6     2      4     552
                                             16 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4     556
                                             22 COMRAM     8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (2) _DisminuirPeriodo                                     1     1      0    2094
                                              6 BANK0      1     1      0
                _CalculoDeFrecuencia
 ---------------------------------------------------------------------------------
 (2) _DesplazarIzquierda                                   0     0      0      60
                          _read_BUSY
                          _write_CMD
 ---------------------------------------------------------------------------------
 (3) _write_CMD                                            1     1      0      45
                                             17 COMRAM     1     1      0
                          _write_LCD
 ---------------------------------------------------------------------------------
 (4) _write_LCD                                            1     1      0      30
                                             16 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _read_BUSY                                            1     1      0      15
                                             16 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _AumentarPeriodo                                      1     1      0    2094
                                              6 BANK0      1     1      0
                _CalculoDeFrecuencia
 ---------------------------------------------------------------------------------
 (2) _CalculoDeFrecuencia                                  2     2      0    2063
                                              4 BANK0      2     2      0
                            ___aldiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     848
                                             30 COMRAM     2     2      0
                                              0 BANK0      4     0      4
                            ___aldiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___aldiv                                             14     6      8    1215
                                             16 COMRAM    14     6      8
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _myISR                                               14    14      0      60
                                              2 COMRAM    14    14      0
                 _tic_demo_shield2_1
 ---------------------------------------------------------------------------------
 (6) _tic_demo_shield2_1                                   0     0      0      60
                            _tic_LCD
                       _tic_debounce
 ---------------------------------------------------------------------------------
 (7) _tic_debounce                                         0     0      0      60
                           _debounce
 ---------------------------------------------------------------------------------
 (8) _debounce                                             2     2      0      60
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (7) _tic_LCD                                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _demo_shield2_1
     _AumentarPeriodo
       _CalculoDeFrecuencia
         ___aldiv
         ___wmul
           ___aldiv (ARG)
     _DesplazarIzquierda
       _read_BUSY
       _write_CMD
         _write_LCD
     _DisminuirPeriodo
       _CalculoDeFrecuencia
         ___aldiv
         ___wmul
           ___aldiv (ARG)
     ___awdiv
       ___awmod (ARG)
     ___awmod
     _char2LCD
       _read_BUSY
       _write_DATA
         _write_LCD
     _clear_LCD
       _read_BUSY
       _write_CMD
         _write_LCD
     _informar
       _transmitir
     _msg2LCD
       _read_BUSY
       _write_DATA
         _write_LCD
     _obtener_ADC8
     _ret_HOME
       _read_BUSY
       _write_CMD
         _write_LCD
     _set_CURSOR
       _read_BUSY
       _write_CMD
         _write_LCD
     _transmitir
   _demo_shield2_1_INI
     _CalculoDeFrecuencia
       ___aldiv
       ___wmul
         ___aldiv (ARG)
     _LCD_init
       _read_BUSY
       _write_CMD
         _write_LCD
     _PicIni21
     _TIMER0_INI
     _TIMER1_INI
     _USART_INI
     _clear_LCD
       _read_BUSY
       _write_CMD
         _write_LCD
     _msg2LCD
       _read_BUSY
       _write_DATA
         _write_LCD

 _myISR (ROOT)
   _tic_demo_shield2_1
     _tic_LCD
     _tic_debounce
       _debounce

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      7       7       5        4.4%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     20      4E       1       83.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      55      20        0.0%
DATA                 0      0      55       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.40 build -251452761 
Symbol Table                                                                                   Sun Dec 25 18:23:38 2016

    __size_of_AumentarPeriodo 0020                            l19 7536                  ___awdiv@sign 0040  
                 __CFG_BOR$ON 000000           ___wmul@multiplicand 0062                   __CFG_BORV$3 000000  
                __CFG_CP0$OFF 000000                  __CFG_CP1$OFF 000000                           l404 771E  
                         l490 7D4E                           l491 7D5E                           l492 7D6E  
                         l493 7D7E                           l398 75AC                           l487 7D3E  
                __CFG_CPB$OFF 000000                           _PR2 000FCB                           _col 0049  
                ___awmod@sign 003A              _MultiplicadorSet 000D                           wreg 000FE8  
                __CFG_LVP$OFF 000000                  __CFG_WDT$OFF 000000                          l3001 7D32  
                        l1343 76BE                          l2511 78A2                          l2503 7888  
                        l1471 7A0A                          l2433 7824                          l2425 777A  
                        l1465 79F4                          l2523 78CE                          l2515 78B6  
                        l2507 7896                          l2419 7762                          l1483 7A36  
                        l2461 78FC                          l2509 789E                          l2429 77FE  
                        l1477 7A20                          l2471 791E                          l2455 78EC  
                        l2519 78C0                          l1495 7A62                          l1489 7A4C  
                        l2731 7A8C                          l2467 7912                          l2483 7944  
                        l2469 791A                          l2901 7BB6                          l2743 7AC6  
                        l2487 7952                          l2479 793A                          l2911 7BD2  
                        l2745 7AD2                          l2737 7AA4                          l2809 7F7E  
                        l2763 7B2A                          l2755 7B06                          l2747 7AD6  
                        l2819 7FD4                          l2499 787C                          l2923 7BF6  
                        l2925 7BFA                          l2759 7B14                          l2775 7E08  
                        l2951 7C48                          l2785 7E8A                          l2953 7C4C  
                        l2929 7C08                          l2873 7B58                          l2939 7C24  
                        l2797 7F00                          l2957 7C5A                          l2967 7C76  
                        l2887 7B80                          l2977 7C94                          l2889 7B84  
                        l2979 7C98                          l2995 7D1E                          STR_1 2041  
                        STR_2 2054                          STR_3 204E                          STR_5 2059  
                        STR_6 205E                          STR_7 2063                          STR_8 2025  
                        u2120 7DA6                          u2200 7620                          u2140 7E20  
                        _LATA 000F89                          _LATB 000F8A                          _LATC 000F8B  
                        u2160 7EA2                          _LATD 000F8C                          _LATE 000F8D  
                        u2180 7F18                          _RBIE 007F93                          _RBIF 007F90  
                        i2l26 79A6                          _RBIP 007F88                          _RBPU 007F8F  
                        _fila 004A                          _main 7532                          fsr0h 000FEA  
                        fsr1h 000FE2                          fsr2h 000FDA                          fsr0l 000FE9  
                        fsr1l 000FE1                          fsr2l 000FD9                          btemp 004F  
                        prodh 000FF4                          prodl 000FF3                          start 200E  
               __CFG_IESO$OFF 000000                  msg2LCD@datos 0037                 __CFG_MCLRE$ON 000000  
                ___param_bank 000000                   ?_TIMER0_INI 0025                   ?_TIMER1_INI 0025  
               __CFG_PLLDIV$5 000000              __end_of_LCD_init 7A70               __end_of___aldiv 7B3C  
                       ?_main 0025               __end_of___awdiv 795C                         _EEADR 000FA9  
             __end_of___awmod 78D8                         _CMCON 000FB4               ___awdiv@divisor 003D  
             ___awdiv@counter 003F                         _RCREG 000FAE                         _TMR0H 000FD7  
                       _TMR1H 000FCF                         _TMR0L 000FD6                         _TMR1L 000FCE  
                       _SPBRG 000FAF                         _PORTA 000F80                         _PORTB 000F81  
               __CFG_USBDIV$2 000000                         _TRISA 000F92                         _TRISB 000F93  
                       _TRISC 000F94                         _TRISD 000F95                         _TRISE 000F96  
                       _TXREG 000FAD                 __CFG_PWRT$OFF 000000                 __CFG_WRT0$OFF 000000  
               __CFG_WRT1$OFF 000000                __CFG_EBTR0$OFF 000000                __CFG_FCMEN$OFF 000000  
              __CFG_EBTR1$OFF 000000               __end_of_msg2LCD 778E                 __CFG_WRTB$OFF 000000  
               __CFG_WRTC$OFF 000000                __CFG_EBTRB$OFF 000000                         _myISR 2008  
             __end_of_tic_LCD 75A4                         pclath 000FFA                         tablat 000FF5  
          __size_of_USART_INI 002A                         status 000FD8               __initialization 782E  
                __end_of_main 753C              __end_of_PicIni21 7760                        ??_main 0045  
               __activetblptr 000002             ??_AumentarPeriodo 0045       obtener_ADC8@GuardoPorta 0035  
     obtener_ADC8@GuardoTrisa 0036                        _ADCON1 000FC1                        _ADCON2 000FC0  
                      ?_myISR 0025                        _ADRESH 000FC4                        _EEDATA 000FA8  
                      _CCPR1L 000FBE                        _EECON2 000FA7              ___awdiv@dividend 003B  
        AumentarPeriodo@valor 0066                        _INT0IE 007F94                        _INT0IF 007F91  
                      _INT1IE 007F83                        _INT1IF 007F80              __end_of_char2LCD 7594  
                      i2l1605 75FE           __size_of_TIMER0_INI 0018                        i2l1881 75D2  
         __size_of_TIMER1_INI 0020   __size_of_DesplazarIzquierda 000C                        _TMR0IF 007F92  
                      _SPBRGH 000FB0   __size_of_tic_demo_shield2_1 0018              __end_of_debounce 76B6  
              __CFG_VREGEN$ON 000000                __CFG_XINST$OFF 000000    __end_of_demo_shield2_1_INI 77F4  
                   ??___aldiv 003D                        ___wmul 778E                     ??___awdiv 003F  
              __CFG_STVREN$ON 000000                     ??___awmod 0039       __size_of_demo_shield2_1 025E  
            __end_of_informar 782E                        clear_0 7854              ___awdiv@quotient 0041  
                      _teclas 2019               ___awmod@divisor 0037              __end_of_ret_HOME 756A  
           __end_of_USART_INI 7708               ___awmod@counter 0039                     ??_msg2LCD 0039  
                __pdataCOMRAM 0045                     ??_tic_LCD 0025                  __mediumconst 0000  
                      tblptrh 000FF7                        tblptrl 000FF6                 ?_obtener_ADC8 0025  
                      tblptru 000FF8     __size_of_DisminuirPeriodo 0020                 _OffsetPeriodo 0047  
         demo_shield2_1@flag0 0020           demo_shield2_1@flag1 0021           demo_shield2_1@flag2 0022  
         demo_shield2_1@flag3 0023           demo_shield2_1@cont1 001D           demo_shield2_1@cont2 001E  
         demo_shield2_1@cont3 001F                    __accesstop 0060       __end_of__initialization 785A  
             __CFG_PBADEN$OFF 000000                     ?_LCD_init 0025                 ___rparam_used 000001  
 __end_of_CalculoDeFrecuencia 8000                __pcstackCOMRAM 0025                 __end_of_myISR 79E2  
          __size_of_clear_LCD 000C                ??_obtener_ADC8 0035                       ??_myISR 0027  
                   ?_PicIni21 0025            __size_of_read_BUSY 0028                    ??_LCD_init 0037  
               _maximoEncoder 0013                 ?_tic_debounce 0025                       ?___wmul 0060  
                ??_TIMER0_INI 0035                  ??_TIMER1_INI 0035                  read_BUSY@aux 0035  
                   ?_char2LCD 0025                  char2LCD@dato 0037                     ?_debounce 0025  
                     Leds13@i 0045                    ??_PicIni21 0035             __end_of_clear_LCD 755E  
          __end_of_TIMER0_INI 75F4            __end_of_TIMER1_INI 7690                     ?_informar 0036  
                  _frecuencia 004D            __size_of_write_CMD 000E            __size_of_write_LCD 0020  
                   ?_ret_HOME 0025                       __Hparam 0000                       __Lparam 0000  
             _AumentarPeriodo 7610                ??_tic_debounce 0027                       ___aldiv 7A70  
              _demo_shield2_1 7B3C                       ___awdiv 78D8                       ___awmod 7868  
             __size_of___wmul 0032                  __psmallconst 2018                       __pcinit 782E  
                     __ramtop 0800                       _flag_kb 0012                       __ptext0 7532  
                     __ptext1 77C0                       __ptext2 76DE                       __ptext3 7670  
                     __ptext4 75DC                       __ptext5 7734                       __ptext6 79E2  
                     __ptext7 7B3C                       __ptext8 75B4                       __ptext9 755E  
                  ??_char2LCD 0037                  informar@dato 0036                       _msg2LCD 7760  
           __end_of_read_BUSY 76DE                     _T0CONbits 000FD5                     _T1CONbits 000FCD  
                   _T2CONbits 000FCA                       _tic_LCD 7594              ___awmod@dividend 0035  
            ___aldiv@dividend 0035                    ??_debounce 0025                 _minimoEncoder 0014  
                  _set_CURSOR 75B4              _DisminuirPeriodo 7650                 debounce@delta 0026  
              __pintcode_body 795C                 debounce@state 0019          end_of_initialization 785A  
              set_CURSOR@posi 0037                    ??_informar 0039                 __Lmediumconst 0000  
                     int_func 795C                    ??_ret_HOME 0037        __end_of_demo_shield2_1 7D9A  
        __end_of_obtener_ADC8 7734                     _RCSTAbits 000FAB              ___aldiv@quotient 003F  
                     postdec1 000FE5                       postinc0 000FEE                     _PORTBbits 000F81  
                   _PORTDbits 000F83                     _PORTEbits 000F84            _demo_shield2_1_INI 77C0  
           __end_of_write_CMD 7578            _EstadoDeLosBotones 000A             __end_of_write_LCD 7650  
                   _USART_INI 76DE                     _TRISAbits 000F92                     _TRISBbits 000F93  
                   _TRISCbits 000F94                     _TRISEbits 000F96             tic_encoder@estado 004C  
  __end_of_DesplazarIzquierda 7552           ?_demo_shield2_1_INI 0025                    _transmitir 75A4  
  __end_of_tic_demo_shield2_1 75DC       __end_of_AumentarPeriodo 7630                   _CCP1CONbits 000FBD  
                   _TXSTAbits 000FAC               ?_demo_shield2_1 0025             __size_of_LCD_init 008E  
        ??_demo_shield2_1_INI 0045                    _write_DATA 7578                __end_of___wmul 77C0  
                 _BAUDCONbits 000FB8                 __pidataCOMRAM 753C                __end_of_teclas 2025  
         start_initialization 782E                    ?_USART_INI 0025                   ?_set_CURSOR 0025  
        __end_of_tic_debounce 7610             __size_of_PicIni21 002C                tecla@status_KB 0024  
                   _LowerByte 000B                      ??___wmul 0043              __CFG_LPT1OSC$OFF 000000  
             _posicionEncoder 0016  __size_of_CalculoDeFrecuencia 0266      tic_debounce@debounce_tic 004B  
          demo_shield2_1@cont 001C                     _UpperByte 0048             __size_of_char2LCD 000E  
                 __pbssCOMRAM 0001                 __pcstackBANK0 0060             __size_of_debounce 0026  
                 ?_transmitir 0025         __size_of_obtener_ADC8 002C              ?_AumentarPeriodo 0025  
           __size_of_informar 003A                     _clear_LCD 7552                     _flagCanal 0011  
           __size_of_ret_HOME 000C      __end_of_DisminuirPeriodo 7670                     __pintcode 2008  
                    ?___aldiv 0035           __size_of_set_CURSOR 0010                   ?_write_DATA 0025  
                    ?___awdiv 003B                      ?___awmod 0035             Send4Disp@Nro_Disp 0046  
                    ?_msg2LCD 0037                   __smallconst 2018                      ?_tic_LCD 0025  
                 ??_USART_INI 0035                _desplazar_tout 0005                     _read_BUSY 76B6  
                _obtener_ADC8 7708                __size_of_myISR 59DA      demo_shield2_1@PrimeraVez 001B  
             ___aldiv@divisor 0039                  debounce@cnt0 0017                  debounce@cnt1 0018  
             ___aldiv@counter 003D                ___wmul@product 0043                      _LATAbits 000F89  
                    _LATBbits 000F8A                      _LATCbits 000F8B                      _LATDbits 000F8C  
                    _LATEbits 000F8D                      _LCD_init 79E2                      _LCD_tout 0001  
                    _PIE1bits 000F9D                   _encoderTout 0010                    ?_clear_LCD 0025  
                    _PIR1bits 000F9E              __CFG_WDTPS$32768 000000              informar@longitud 0038  
         __size_of_transmitir 0010                    _ADCON0bits 000FC2                 _Multiplicador 000C  
           ___wmul@multiplier 0060         __size_of_tic_debounce 001C               _MedioPeriodoSet 0003  
                  ?_read_BUSY 0025                     _write_CMD 756A                     _write_LCD 7630  
                 _INTCON2bits 000FF1                   _INTCON3bits 000FF0                     copy_data0 7842  
         __size_of_write_DATA 000E                      _PicIni21 7734              ??_demo_shield2_1 0045  
         Botones13@Estado_BOT 0009       demo_shield2_1@Desplazar 001A                    _EECON1bits 000FA6  
                    __Hrparam 0000            _DesplazarIzquierda 7546                      __Lrparam 0000  
                   informar@i 003B            _tic_demo_shield2_1 75C4                  _tic_debounce 75F4  
            __size_of___aldiv 00CC                write_DATA@dato 0036              __size_of___awdiv 0084  
            __size_of___awmod 0070           ?_DesplazarIzquierda 0025                      _char2LCD 7586  
         ?_tic_demo_shield2_1 0025              __size_of_msg2LCD 002E                      _debounce 7690  
                    _delay_kb 000F              __size_of_tic_LCD 0010                  ??_set_CURSOR 0037  
                  ?_write_CMD 0025                    ?_write_LCD 0025                      __ptext10 7708  
                    __ptext11 7760                      __ptext20 7546                      __ptext12 77F4  
                    __ptext21 756A                      __ptext13 75A4                      __ptext30 75F4  
                    __ptext22 7630                      __ptext14 7552                      __ptext31 7690  
                    __ptext23 76B6                      __ptext15 7586                      __ptext32 7594  
                    __ptext24 7610                      __ptext16 7578                      __ptext25 7D9A  
                    __ptext17 7868                      __ptext26 778E                      __ptext18 78D8  
                    __ptext27 7A70                      __ptext19 7650                      __ptext29 75C4  
                    _bot_tout 000E                      _led_tout 0007          ??_DesplazarIzquierda 0037  
                    _informar 77F4          ??_tic_demo_shield2_1 0027           _CalculoDeFrecuencia 7D9A  
               __size_of_main 000A                      _ret_HOME 755E                   ??_clear_LCD 0037  
                    int$flags 004F   __size_of_demo_shield2_1_INI 0034                      _mux_tout 0015  
          __end_of_set_CURSOR 75C4                debounce@sample 0025          ?_CalculoDeFrecuencia 0025  
       __CFG_CPUDIV$OSC1_PLL2 000000                    _INTCONbits 000FF2                   ??_read_BUSY 0035  
                ??_transmitir 0035                      intlevel2 0000                 write_CMD@dato 0036  
              transmitir@Dato 0035                 write_LCD@dato 0035                  ??_write_DATA 0036  
           ?_DisminuirPeriodo 0025                    _TIMER0_INI 75DC                    _TIMER1_INI 7670  
          ??_DisminuirPeriodo 0045         ??_CalculoDeFrecuencia 0064            __end_of_transmitir 75B4  
                ___aldiv@sign 003E                   ??_write_CMD 0036                   ??_write_LCD 0035  
       DisminuirPeriodo@valor 0066            __CFG_FOSC$HSPLL_HS 000000            __end_of_write_DATA 7586  
